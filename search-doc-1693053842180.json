[{"title":"Benchmark","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Benchmark","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/api/Benchmark#types","content":" "},{"title":"BenchmarkData​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/api/Benchmark#BenchmarkData","content":"&lt;/&gt; type BenchmarkData = { total: number, longest: number, shortest: number, average: number } The data that is returned after a :SetFunction call is finished. "},{"title":"Functions​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/api/Benchmark#functions","content":" "},{"title":"CreateBenchmark​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/api/Benchmark#CreateBenchmark","content":"&lt;/&gt; Benchmark.CreateBenchmark() → BenchmarkObject Creates a new Benchmark object to be used. "},{"title":"BenchmarkObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/BenchmarkObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#properties","content":" "},{"title":"IsCompleted​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#IsCompleted","content":"&lt;/&gt; BenchmarkObject.IsCompleted: boolean A boolean to decide if the benchmark should be GC'ed.  "},{"title":"Destroying​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Destroying","content":"Event &lt;/&gt; BenchmarkObject.Destroying: SignalController A signal that fires when the benchmark has been disposed of.  "},{"title":"StartTime​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#StartTime","content":"&lt;/&gt; BenchmarkObject.StartTime: number The time (in seconds) the benchmark was started at.  "},{"title":"EndTime​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#EndTime","content":"&lt;/&gt; BenchmarkObject.EndTime: number The time (in seconds) the benchmark was ended at. "},{"title":"Functions​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#functions","content":" "},{"title":"SetFunction​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#SetFunction","content":"&lt;/&gt; BenchmarkObject:SetFunction( timesToRun: number,-- The amount of times to run func. func: (timesRan: number) → ()-- The function to run for each timesToRun index, has a timesRan argument which is how many times the benchmark has run so far. ) → BenchmarkData Sets the function to be ran timesToRun amount of times. danger BenchmarkObject:Stop is already called after being finished, calling the latter manually will result in an error.  "},{"title":"Start​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Start","content":"&lt;/&gt; BenchmarkObject:Start() → () Starts the benchmark object.  "},{"title":"Stop​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Stop","content":"&lt;/&gt; BenchmarkObject:Stop() → number Stops the benchmark from running and destroys it, returns the amount of time it took to complete the code above it.  "},{"title":"GetCurrentTime​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#GetCurrentTime","content":"&lt;/&gt; BenchmarkObject:GetCurrentTime() → number? Gets the current elapsed time of the benchmark.  "},{"title":"Destroy​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Destroy","content":"&lt;/&gt; BenchmarkObject:Destroy() → () Destroys the BenchmarkObject, this is done automatically after SetFunction is finished of Stop is called. "},{"title":"Base64","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Base64","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Base64","url":"/CanaryEngine/api/Base64#functions","content":" "},{"title":"Encode​","type":1,"pageTitle":"Base64","url":"/CanaryEngine/api/Base64#Encode","content":"&lt;/&gt; Base64.Encode( Data: any-- The data to encode ) → () Encodes data into Base64.  "},{"title":"Decode​","type":1,"pageTitle":"Base64","url":"/CanaryEngine/api/Base64#Decode","content":"&lt;/&gt; Base64.Decode( Data: any-- The data to decode ) → () Decodes data out of Base64. "},{"title":"CanaryEngine","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngine","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#properties","content":" "},{"title":"Runtime​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#Runtime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngine.Runtime: { RuntimeSettings: RuntimeSettings, RuntimeContext: RuntimeContext, RuntimeObjects: { NetworkControllers: {[string]: ( ServerNetworkController&lt;any, any&gt; | ServerNetworkController&lt;any, any&gt; )}, SignalControllers: {[string]: SignalController&lt;any&gt;} } } The runtime property contains settings that are set during runtime, and the current context of the server/client.  "},{"title":"Libraries​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#Libraries","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngine.Libraries: { Utility: Utility, Benchmark: Benchmark, Statistics: Statistics, Serialize: Serialize } The libraries property contains useful libraries like Benchmark or Serialize.  "},{"title":"Debugger​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#Debugger","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngine.Debugger: EngineDebugger The internal engine debugger, has useful functions to abide by debug settings. "},{"title":"Functions​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#functions","content":" "},{"title":"GetEngineServer​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetEngineServer","content":"This item only works when running on the server. Server &lt;/&gt; CanaryEngine.GetEngineServer() → EngineServer? Gets the server-sided interface of CanaryEngine  "},{"title":"GetEngineClient​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetEngineClient","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; CanaryEngine.GetEngineClient() → EngineClient? Gets the client-sided interface of CanaryEngine  "},{"title":"GetEngineReplicated​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetEngineReplicated","content":"&lt;/&gt; CanaryEngine.GetEngineReplicated() → EngineReplicated? Gets the global-sided interface of CanaryEngine. Recommended that use this only in replicated packages, this is a bad practice anywhere else.  "},{"title":"CreateSignal​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#CreateSignal","content":"&lt;/&gt; CanaryEngine.CreateSignal( signalName: string-- The name of the signal ) → SignalController&lt;any&gt; Creates a new signal that is then given a reference in the signals table. Create a new anonymous signal by leaving the name blank.  "},{"title":"CreateAnonymousSignal​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#CreateAnonymousSignal","content":"&lt;/&gt; CanaryEngine.CreateAnonymousSignal() → SignalController&lt;any&gt; Creates a new anonymous signal, this does not have a reference outside of the variable it was created in.  "},{"title":"GetLatestPackageVersionAsync​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetLatestPackageVersionAsync","content":"This item only works when running on the server. Server This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields deprecated in v3.1.4 &lt;/&gt; This was deprecated in v3.1.4 Deprecated in favor of newer and better package systems CanaryEngine.GetLatestPackageVersionAsync( package: Instance ,-- The package to check the version of, must have the required attributes. warnIfNotLatestVersion: boolean?,-- An optional setting to warn the user if the provided package is not up-to-date, defaults to true. respectDebugger: boolean?-- An optional setting to respect the debugger when warning the user, only applies when warnIfNotLatestVersion is true. ) → number? Checks the latest version of the provided package, and returns the latest version if you gave version permissions. caution If you come across the error &quot;package must have a valid 'VersionNumber'&quot;, that means the description of your asset does not contain the current version of your asset. This is required to compare versions. "},{"title":"EasyProfile","type":0,"sectionRef":"#","url":"/CanaryEngine/api/EasyProfile","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#types","content":" "},{"title":"ProfileMetaData​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#ProfileMetaData","content":"&lt;/&gt; interface ProfileMetaData { ProfileCreated: number ProfileLoadCount: number ProfileActiveSession: { placeId: number, jobId: string } } The metadata for a user's profile.  "},{"title":"GlobalKey​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#GlobalKey","content":"&lt;/&gt; type GlobalKey = { Key: string, Value: any, KeyId: number } The type for the global key. "},{"title":"Properties​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#properties","content":" "},{"title":"LoadedData​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#LoadedData","content":"&lt;/&gt; EasyProfile.LoadedData: {[string]: {[Player | string]: ProfileObject}} A table of the currently loaded profiles in game, each key is based on a profile store. "},{"title":"Functions​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#functions","content":" "},{"title":"CreateProfileStore​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#CreateProfileStore","content":"&lt;/&gt; EasyProfile.CreateProfileStore( name: string?,-- The name of the profile store to get, defaults to &quot;Global&quot; defaultProfileData: dictionary,-- The default data of profie when loaded, only applies if this is their first time joining playerKeyPattern: string-- The pattern for the key to use if used to store player data, use '%d' as a placeholder for the player's UserId. ) → ProfileStoreObject? Gets an existing profile store of creates one if it does not exist yet. "},{"title":"CanaryEngineReplicated","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngineReplicated","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngineReplicated","url":"/CanaryEngine/api/CanaryEngineReplicated#properties","content":" "},{"title":"Packages​","type":1,"pageTitle":"CanaryEngineReplicated","url":"/CanaryEngine/api/CanaryEngineReplicated#Packages","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineReplicated.Packages: Folder  A reference to the Packages folder that is replicated.  "},{"title":"Media​","type":1,"pageTitle":"CanaryEngineReplicated","url":"/CanaryEngine/api/CanaryEngineReplicated#Media","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineReplicated.Media: Folder  A reference to the Media folder that is replicated. "},{"title":"CanaryEngineClient","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngineClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#properties","content":" "},{"title":"Player​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Player","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.Player: Player  A simple reference to the Players.LocalPlayer.  "},{"title":"Character​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Character","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.Character: Character&amp;Model  A simple reference to the Player.Character.  "},{"title":"PlayerGui​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#PlayerGui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.PlayerGui: StarterGui  A simple reference to the Player.PlayerGui, useful for automatic typing and API simplicity.  "},{"title":"PlayerBackpack​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#PlayerBackpack","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.PlayerBackpack: StarterPack  A simple reference to the player's Backpack, useful for automatic typing and API simplicity.  "},{"title":"Media​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Media","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineClient.Media: { Client: Folder , Replicated: Folder } A reference to the Media folder on the client, also gives access to replicated media.  "},{"title":"Packages​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Packages","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineClient.Packages: { Client: Folder , Replicated: Folder } A reference to the Packages folder on the client, also gives access to replicated Packages. "},{"title":"Functions​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#functions","content":" "},{"title":"CreateNetworkController​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#CreateNetworkController","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; CanaryEngineClient.CreateNetworkController( controllerName: string,-- The name of the controller controllerTimeout: number?-- Sets the maximum timeout when waiting for network controllers on the server, defaults to 3 seconds ) → ClientNetworkController&lt;any&gt; Creates a new network controller on the client, with the name of controllerName tip You can set the data type of a network controller after it being made like the following: local NetworkController: CanaryEngine.ClientNetworkController&lt;boolean&gt; = EngineClient.CreateNetworkController(&quot;MyNewNetworkController&quot;) -- assuming you are sending over and recieving a boolean  "},{"title":"CanaryEngineServer","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngineServer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#properties","content":" "},{"title":"Media​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#Media","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineServer.Media: { Server: Folder , Replicated: Folder } A reference to the Media folder on the Server, also gives access to replicated media.  "},{"title":"Packages​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#Packages","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineServer.Packages: { Server: Folder , Replicated: Folder } A reference to the Packages folder on the Server, also gives access to replicated Packages. "},{"title":"Functions​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#functions","content":" "},{"title":"CreateNetworkController​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#CreateNetworkController","content":"&lt;/&gt; CanaryEngineServer.CreateNetworkController( controllerName: string-- The name of the controller ) → ServerNetworkController&lt;any&gt; Creates a new network controller on the server, with the name of controllerName tip You can set the data type of a network controller after it being made like the following: local NetworkController: CanaryEngine.ServerNetworkController&lt;number&gt; = EngineServer.CreateNetworkController(&quot;MyNewNetworkController&quot;) -- assuming you are sending over and recieving a number  "},{"title":"EngineLoader","type":0,"sectionRef":"#","url":"/CanaryEngine/api/EngineLoader","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"EngineLoader","url":"/CanaryEngine/api/EngineLoader#properties","content":" "},{"title":"IsClientLoaded​","type":1,"pageTitle":"EngineLoader","url":"/CanaryEngine/api/EngineLoader#IsClientLoaded","content":"&lt;/&gt; EngineLoader.IsClientLoaded: boolean A boolean that is true if the client is loaded. "},{"title":"Functions​","type":1,"pageTitle":"EngineLoader","url":"/CanaryEngine/api/EngineLoader#functions","content":" "},{"title":"StartLoad​","type":1,"pageTitle":"EngineLoader","url":"/CanaryEngine/api/EngineLoader#StartLoad","content":"&lt;/&gt; EngineLoader.StartLoad( objectsToLoad: {any},-- The objects to load, can be a list of asset id strings or instances loadingMessages: {[string]: Color3 }?,-- The messages to display after the loading is finished, the key is the message and the value is the color of the message coreGuiEnabled: boolean?,-- Decides whether the CoreGui is enabled during loading afterLoadWait: number?,-- The amount of time to wait after the load, this is before the messages in loadingMessages are shown and the loading stats are shown loadingText: { loadingAssetsText: string, loadedAssetsText: string }?-- The text that should be shown when loading assets and after loading assets ) → () Starts up the loader, this should be run as soon as the player joins in EngineReplicatedFirst/Scripts.  "},{"title":"CustomizeInterface​","type":1,"pageTitle":"EngineLoader","url":"/CanaryEngine/api/EngineLoader#CustomizeInterface","content":"&lt;/&gt; EngineLoader.CustomizeInterface(interfaceProperties: {[string]: {[string]: any}}) → () Allows you to customize the interface, giving you the ability to change the relevant properties. Container is the main frame. "},{"title":"EngineDebugger","type":0,"sectionRef":"#","url":"/CanaryEngine/api/EngineDebugger","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#types","content":" "},{"title":"ExpectedType​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#ExpectedType","content":"&lt;/&gt; type ExpectedType = &quot;Axes&quot; | &quot;BrickColor&quot; | &quot;CatalogSearchParams&quot; | &quot;CFrame&quot; | &quot;Color3&quot; | &quot;ColorSequence&quot; | &quot;ColorSequenceKeypoint&quot; | &quot;Content&quot; | &quot;DateTime&quot; | &quot;DockWidgetPluginGuiInfo&quot; | &quot;Enum&quot; | &quot;EnumItem&quot; | &quot;Enums&quot; | &quot;Faces&quot; | &quot;FloatCurveKey&quot; | &quot;Font&quot; | &quot;Instance&quot; | &quot;NumberRange&quot; | &quot;NumberSequence&quot; | &quot;NumberSequenceKeyPoint&quot; | &quot;OverlapParams&quot; | &quot;PathWaypoint&quot; | &quot;PhysicalProperties&quot; | &quot;Random&quot; | &quot;Ray&quot; | &quot;RayastParams&quot; | &quot;RaycastResult&quot; | &quot;RBXScriptConnection&quot; | &quot;RBXScriptSignal&quot; | &quot;Rect&quot; | &quot;Region3&quot; | &quot;Region3int16&quot; | &quot;SharedTable&quot; | &quot;TweenInfo&quot; | &quot;UDim&quot; | &quot;UDim2&quot; | &quot;Vector2&quot; | &quot;Vector2int16&quot; | &quot;Vector3&quot; | &quot;Vector3int16&quot; | &quot;nil&quot; | &quot;boolean&quot; | &quot;number&quot; | &quot;string&quot; | &quot;function&quot; | &quot;userdata&quot; | &quot;thread&quot; | &quot;table&quot; This type contains every roblox user data and generic type. "},{"title":"Properties​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#properties","content":" "},{"title":"CachedStackTraces​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#CachedStackTraces","content":"&lt;/&gt; EngineDebugger.CachedStackTraces: {[string]: CallStack} A list of cached stack traces for the current environment.  "},{"title":"CachedDebugCalls​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#CachedDebugCalls","content":"&lt;/&gt; EngineDebugger.CachedDebugCalls: {string | {string}} A list of cached debug calls for the current environment. "},{"title":"Functions​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#functions","content":" "},{"title":"Debug​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#Debug","content":"&lt;/&gt; EngineDebugger.Debug( debugHandler: (...T) → () | ( message: T, level: number ) → (),-- The function to run on debug, for example Debugger.Debug(print, &quot;Hello, world!&quot;) arguments: {string} | string,-- The contents to be passed to the function prefix: string?,-- The prefix to put in front of the debug respectDebugger: boolean?-- Whether or not to respect the debugger, should always be true for correct use ) → () The main debug handler, adds a prefix to logs sent out and respects logging settings.  "},{"title":"ClearOutput​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#ClearOutput","content":"&lt;/&gt; EngineDebugger.ClearOutput( clearDebugCallCache: boolean?-- Decides whether or not the debug call cache should be cleared too ) → () Clears the output and cached stack traces, with the option of also clearing cached debug calls.  "},{"title":"Assert​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#Assert","content":"&lt;/&gt; EngineDebugger.Assert( assertionHandler: (...any) → (),-- The handler to run if the assertion is not truthy assertion: T,-- The value to assert, this is checked message: string,-- The message to pass to the handler ...: string-- Any values to format from message, functions identically to string.format ) → T Checks if a value is nil / false and runs the provided handler. This always respects the debugger.  "},{"title":"GetCallStack​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#GetCallStack","content":"&lt;/&gt; EngineDebugger.GetCallStack( instance: Instance ,-- The instance to start at stackName: string?-- The name of the stack, defaults to the stack number ) → string Gets the call stack of any instance.  "},{"title":"DebugInvalidData​","type":1,"pageTitle":"EngineDebugger","url":"/CanaryEngine/api/EngineDebugger#DebugInvalidData","content":"&lt;/&gt; EngineDebugger.DebugInvalidData( paramNumber: number,-- The number of which param errored, 1 would be the first param funcName: string,-- The name of the function expectedType: ExpectedType,-- The type that was expected of param param: T,-- The param which caused the error debugHander: (...any) → () ) → () Errors if the param does not have the same type as what is expected. "},{"title":"Fetch","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Fetch","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Fetch","url":"/CanaryEngine/api/Fetch#properties","content":" "},{"title":"RequestCache​","type":1,"pageTitle":"Fetch","url":"/CanaryEngine/api/Fetch#RequestCache","content":"&lt;/&gt; Fetch.RequestCache: {[string]: any} Cached data from previously made requests. "},{"title":"Functions​","type":1,"pageTitle":"Fetch","url":"/CanaryEngine/api/Fetch#functions","content":" "},{"title":"FetchAsync​","type":1,"pageTitle":"Fetch","url":"/CanaryEngine/api/Fetch#FetchAsync","content":"&lt;/&gt; Fetch.FetchAsync( requestUrl: string,-- The url to make the request to decodeContent: boolean?,-- Whether or not the request should be decoded maxRetries: number?,-- The maximum amount of retries if the request fails requestCachePool: string-- Decides if the request is cached in Fetch.RequestCache ) → any Gets the contents from a specified URL, retrying multiple times if the request was not a success. "},{"title":"NetworkControllerClient","type":0,"sectionRef":"#","url":"/CanaryEngine/api/NetworkControllerClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NetworkControllerClient.Name: string The name of the the network controller. "},{"title":"Functions​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Fire","content":"&lt;/&gt; NetworkControllerClient:Fire( data: ({any} | any)?-- The data that should be sent to the server ) → () Fires an event which sends data to the server, equivalent to RemoteEvent:FireServer tip If you're firing a single piece of data, there is no need to wrap it in a table! NetworkController:Fire(&quot;Hello, world!&quot;)   "},{"title":"Once​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Once","content":"&lt;/&gt; NetworkControllerClient:Once( func: (data: {any}) → ()-- The function to call when data is recieved from the server ) → ControllerConnection Connects a function to the event that is fired when the server fires the network controller. When using :Once, the function is only run the first time and then the connection is disconnected automatically.  "},{"title":"Connect​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Connect","content":"&lt;/&gt; NetworkControllerClient:Connect( func: (data: {any}) → ()-- The function to call when data is recieved from the server ) → ControllerConnection Connects a function to the event that is fired when the server fires the network controller.  "},{"title":"Wait​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkControllerClient:Wait() → {any} Yields the current thread until the server fires the network controller.  "},{"title":"InvokeAsync​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#InvokeAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkControllerClient:InvokeAsync( data: ({any} | any)?-- The data to invoke the server with ) → {any} Invokes the server, equivalent to RemoteFunction:InvokeServer.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#DisconnectAll","content":"&lt;/&gt; NetworkControllerClient:DisconnectAll() → () Disconnects all listeners from the current network controller.  "},{"title":"Destroy​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Destroy","content":"&lt;/&gt; NetworkControllerClient:Destroy() → () Destroys the current network controller. "},{"title":"EngineTypes","type":0,"sectionRef":"#","url":"/CanaryEngine/api/EngineTypes","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"EngineTypes","url":"/CanaryEngine/api/EngineTypes#types","content":" "},{"title":"SignalController​","type":1,"pageTitle":"EngineTypes","url":"/CanaryEngine/api/EngineTypes#SignalController","content":"&lt;/&gt; interface SignalController { Connect: ( self: SignalController&lt;T&gt;, func: (data: {T}) → () ) → (ControllerConnection) Wait: (self: SignalController&lt;T&gt;) → ({T}) Once: ( self: SignalController&lt;T&gt;, func: (data: {T}) → () ) → (ControllerConnection) Fire: ( self: SignalController&lt;T&gt;, data: ({T} | T)? ) → () DisconnectAll: (self: SignalController&lt;T&gt;) → () Name: string } A signal controller, similar to an RBXScriptSignal  "},{"title":"ClientNetworkController​","type":1,"pageTitle":"EngineTypes","url":"/CanaryEngine/api/EngineTypes#ClientNetworkController","content":"&lt;/&gt; interface ClientNetworkController { Connect: ( self: ClientNetworkController&lt;T, U&gt;, func: (data: {T}) → () ) → (ControllerConnection) Once: ( self: ClientNetworkController&lt;T, U&gt;, func: (data: {T}) → () ) → (ControllerConnection) Wait: ( self: ClientNetworkController&lt;T, U&gt; ) → ({T}) Fire: ( self: ClientNetworkController&lt;T, U&gt;, data: ({T} | T)? ) → () InvokeAsync: ( self: ClientNetworkController&lt;T, U&gt;, data: ({T} | T)? ) → ({U}) Destroy: ( self: ClientNetworkController&lt;T, U&gt; ) → () DisconnectAll: ( self: ClientNetworkController&lt;T, U&gt; ) → () Name: string } A ClientNetworkController is basically a mixed version of a RemoteEvent and RemoteFunction. It has better features and is more performant.  "},{"title":"ServerNetworkController​","type":1,"pageTitle":"EngineTypes","url":"/CanaryEngine/api/EngineTypes#ServerNetworkController","content":"&lt;/&gt; interface ServerNetworkController { Connect: ( self: ServerNetworkController&lt;T, U&gt;, func: ( sender: Player , data: {T} ) → () ) → (ControllerConnection) Once: ( self: ServerNetworkController&lt;T, U&gt;, func: ( sender: Player , data: {T} ) → () ) → (ControllerConnection) Wait: ( self: ServerNetworkController&lt;T, U&gt; ) → ( Player , {T} ) Fire: ( self: ServerNetworkController&lt;T, U&gt;, recipient: Player | {Player }, data: ({T} | T)? ) → () FireAll: ( self: ServerNetworkController&lt;T, U&gt;, data: ({T} | T)? ) → () FireExcept: ( self: ServerNetworkController&lt;T, U&gt;, except: Player | {Player }, data: ({T} | T)? ) → () FireInRange: ( self: ServerNetworkController&lt;T, U&gt;, comparePoint: Vector3 , maximumRange: number, data: ({T} | T)? ) → () OnInvoke: ( self: ServerNetworkController&lt;T, U&gt;, callback: ( sender: Player , data: {T} ) → () ) → () SetRateLimit: ( self: ServerNetworkController&lt;T, U&gt;, maxInvokesPerSecond: number, invokeOverflowCallback: (sender: Player ) → () ) → () Destroy: ( self: ClientNetworkController&lt;T, U&gt; ) → () DisconnectAll: ( self: ServerNetworkController&lt;T, U&gt; ) → () Name: string } A ServerNetworkController is basically a mixed version of a RemoteEvent and RemoteFunction. It has better features and is more performant, though this is the server-sided API.  "},{"title":"Character​","type":1,"pageTitle":"EngineTypes","url":"/CanaryEngine/api/EngineTypes#Character","content":"&lt;/&gt; interface Character { Body_Colors: BodyColors HumanoidRootPart: Part Humanoid: Humanoid Torso: Part Head: Part Animate: LocalScript Left_Arm: Part Left_Leg: Part Right_Arm: Part Right_Leg: Part } A basic type of an R6 character rig. Should be combined with model using the &amp; syntax. "},{"title":"NetworkControllerServer","type":0,"sectionRef":"#","url":"/CanaryEngine/api/NetworkControllerServer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NetworkControllerServer.Name: string The name of the the network controller. "},{"title":"Functions​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Fire","content":"&lt;/&gt; NetworkControllerServer:Fire( recipients: Player | {Player },-- The players who should recieve the data and/or call data: ({any} | any)?-- The data that should be sent to the client ) → () Fires an event which sends data to the client, equivalent to RemoteEvent:FireClient. tip If you need to fire the event to multiple players instead of one, you can use a table of players. NetworkController:Fire({Player1, Player2, Player3}, {1, 2, 3})   "},{"title":"FireAll​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#FireAll","content":"&lt;/&gt; NetworkControllerServer:FireAll( data: ({any} | any)?-- The data that should be sent to each player ) → () Fires an event which sends data to every client connected to the server, equivalent to RemoteEvent:FireAllClients.  "},{"title":"FireExcept​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#FireExcept","content":"&lt;/&gt; NetworkControllerServer:FireExcept( except: Player | {Player },-- The players which the call should not be sent to data: ({any} | any)?-- The data that should be sent to each player except except ) → () Fires an event which sends data to every client connected to the server, except for players in the except parameter.  "},{"title":"FireInRange​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#FireInRange","content":"&lt;/&gt; NetworkControllerServer:FireInRange( comparePoint: Vector3 ,-- The point to compare from, can be a standalone Vector3 or a part's Vector3 maximumRange: number,-- The maximum range of which the player's characters have to be within to recieve the event data: ({any} | any)?-- The data that should be sent to each player within maximumRange ) → () Fires an event which sends data to every client that is within maximumRange studs from comparePoint.  "},{"title":"OnInvoke​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#OnInvoke","content":"&lt;/&gt; NetworkControllerServer:OnInvoke( callback: ( sender: Player , data: {any} ) → (({any} | any)?)-- The callback function to run on invoke, must return at least 1 value. ) → () Recieves an invoke from the server, and runs the callback function which returns some data. Equivalent to RemoteFunction.OnServerInvoke.  "},{"title":"SetRateLimit​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#SetRateLimit","content":"&lt;/&gt; NetworkControllerServer:SetRateLimit( maxInvokesPerSecond: number,-- The maximum amount of invokes allowed per second, set to -1 to disable the rate limit invokeOverflowCallback: ((sender: Player ) → ())?-- The callback function to run when the player has exceeded the current rate limit ) → () Sets a rate limit that is applied when invoking or firing a network controller from the client.  "},{"title":"Once​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Once","content":"&lt;/&gt; NetworkControllerServer:Once( func: ( sender: Player , data: {any} ) → ()-- The function to call when data is recieved from the client ) → ControllerConnection Connects a function to the event that is fired when the client fires the network controller. When using :Once, the function is only run the first time and then the connection is disconnected automatically.  "},{"title":"Connect​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Connect","content":"&lt;/&gt; NetworkControllerServer:Connect( func: ( sender: Player , data: {any} ) → ()-- The function to call when data is recieved from the server ) → ControllerConnection Connects a function to the event that is fired when the server fires the network controller.  "},{"title":"Wait​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkControllerServer:Wait() → ( Player , {any} ) Yields the current thread until the client fires the network controller.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#DisconnectAll","content":"&lt;/&gt; NetworkControllerServer:DisconnectAll() → () Disconnects all listeners from the current network controller.  "},{"title":"Destroy​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Destroy","content":"&lt;/&gt; NetworkControllerServer:Destroy() → () Destroys the current network controller. "},{"title":"ProfileObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/ProfileObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#properties","content":" "},{"title":"GlobalKeyAdded​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GlobalKeyAdded","content":"Event &lt;/&gt; ProfileObject.GlobalKeyAdded: SignalController&lt;GlobalKey&gt; Fires when a global key has been recieved by the server. "},{"title":"Functions​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#functions","content":" "},{"title":"GetProfileData​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetProfileData","content":"&lt;/&gt; ProfileObject:GetProfileData() → {[string]: any}? Gets the data for the profile that was loaded in.  "},{"title":"CreateProfileLeaderstats​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#CreateProfileLeaderstats","content":"&lt;/&gt; ProfileObject:CreateProfileLeaderstats( player: Player ,-- The player to parent the leaderstats to, required because the owner of the profile can be the player or a set string statsToAdd: {string}?,-- Specific stats to add, leaving this nil will account for all data on the profile isAttributes: boolean? ) → Folder?  Creates leaderstats for Roblox's leaderboard based on provided values from the profile. If a value isn't supported, it won't be added to the leaderboard. Here is a list of natively supported types: Type boolean number string   "},{"title":"GetGlobalKeys​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetGlobalKeys","content":"&lt;/&gt; ProfileObject:GetGlobalKeys() → {GlobalKey}? Gets all of the global keys that were recieved when the target was offline.  "},{"title":"AddUserIds​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#AddUserIds","content":"&lt;/&gt; ProfileObject:AddUserIds( userIds: number | {number}-- The UserIds to add. ) → () Adds UserId's to the target profile.  "},{"title":"GetUserIds​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetUserIds","content":"&lt;/&gt; ProfileObject:GetUserIds() → {number}? Gets all the associated UserId's of the target profile.  "},{"title":"RemoveUserIds​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#RemoveUserIds","content":"&lt;/&gt; ProfileObject:RemoveUserIds( userIds: {number}?-- The userId's to clear off the target profile ) → () Removes all the associated UserId's off of the target profile, leave userIds blank to clear all user IDs.  "},{"title":"GetMetaData​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetMetaData","content":"&lt;/&gt; ProfileObject:GetMetaData() → ProfileMetaData? Gets all metadata that is related to the target profile.  "},{"title":"GetDataUsage​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetDataUsage","content":"&lt;/&gt; ProfileObject:GetDataUsage() → number? Gets the amount of data (in percent) currently being used by the profile. "},{"title":"SignalControllerObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/SignalControllerObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SignalControllerObject.Name: string The name of the the signal controller. "},{"title":"Functions​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Fire","content":"&lt;/&gt; SignalControllerObject:Fire( data: ({any} | any)?-- The data that should be sent the other script ) → () Fires an event which sends data to another script that is connected to it, equivalent to BindableEvent:Fire tip If you're firing a single piece of data, there is no need to wrap it in a table! SignalController:Fire(&quot;Hello, world!&quot;)   "},{"title":"Connect​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Connect","content":"&lt;/&gt; SignalControllerObject:Connect( func: (data: {any}) → ()-- The function to call when data is recieved ) → ControllerConnection Connects a function to the event that is fired when another script fires the controller.  "},{"title":"Once​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Once","content":"&lt;/&gt; SignalControllerObject:Once( func: (data: {any}) → ()-- The function to call when data is recieved ) → ControllerConnection Connects a function to the event that is fired when another script fires the controller. When using :Once, the function is only run the first time and then the connection is disconnected automatically.  "},{"title":"Wait​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; SignalControllerObject:Wait() → {any} Yields the current thread until another script fires the signal controller.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#DisconnectAll","content":"&lt;/&gt; SignalControllerObject:DisconnectAll() → () Disconnects all listeners from the current signal controller. "},{"title":"ProfileStoreObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/ProfileStoreObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#properties","content":" "},{"title":"SessionLockClaimed​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#SessionLockClaimed","content":"Event &lt;/&gt; ProfileStoreObject.SessionLockClaimed: SignalController&lt;Player | string&gt; Fires when a session lock has been claimed.  "},{"title":"SessionLockUnclaimed​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#SessionLockUnclaimed","content":"Event &lt;/&gt; ProfileStoreObject.SessionLockUnclaimed: SignalController&lt;Player | string&gt; Fires when a session lock has been unclaimed. "},{"title":"Functions​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#functions","content":" "},{"title":"DeleteProfileAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#DeleteProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:DeleteProfileAsync( target: number | string-- The user id / key to erase the data of ) → () Completely wipes the data of the key userId, good for complying with GDPR practices.  "},{"title":"GetProfileAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#GetProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:GetProfileAsync( target: number | string-- The user id / key to get of the data of ) → {[string]: any}? Fetches the data off the key userId, this will only read data and does not load it.  "},{"title":"LoadProfileAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#LoadProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:LoadProfileAsync( owner: Player | string,-- The owner of profile to load the data of reconcileData: boolean?,-- Whether or not to reconcile the data of the profile, defaults to true profileClaimedHandler: (( placeId: number, gameJobId: string ) → (ProfileLoadType))?-- The function to run when the profile is already claimed ) → ProfileObject? Loads the data off the key userId. All edits to this data will be saved and be able to be used next session.  "},{"title":"UnclaimSessionLock​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#UnclaimSessionLock","content":"&lt;/&gt; ProfileStoreObject:UnclaimSessionLock( owner: Player | string,-- The owner of the profile to unclaim the session lock of valuesToSave: dictionary?,-- Values to save that are not already saved to the profile data, for example attributes that need to be saved on player removing hopReadyCallback?: (() → ())?-- The function to run when a server hop is ready, leaving this blank will disable this feature ) → () Unclaims the session lock that the profile holds, throwing a warning if they are not session locked. This is usually because you did not load the profile data correctly. valuesToSave Example usage: Players.PlayerRemoving:Connect(function(player) MyDataStore:UnclaimSessionLock(player, { Coins = player:GetAttribute(&quot;Coins&quot;) -- Make sure coins is a member of your profile data, or it will skip over it. }) end)   "},{"title":"SetGlobalKeyAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#SetGlobalKeyAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:SetGlobalKeyAsync( target: number | string,-- The target to set the global key of key: string,-- The key to send to the target value: any-- The value of key ) → () Sets a global key for target profile, regardless of whether they share the same JobId as the sender or they are offline.  "},{"title":"RemoveGlobalKeyAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#RemoveGlobalKeyAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:RemoveGlobalKeyAsync( target: number | string,-- The target to remove the global key of keyId: number-- The keyId of the key to remove ) → () Removes the global key that sent by using ProfileStoreObject:SetGlobalKeyAsync with the key ID of keyId. This only applies if it has not been recieved yet. "},{"title":"Statistics","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Statistics","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#functions","content":" "},{"title":"GetMedian​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#GetMedian","content":"&lt;/&gt; Statistics.GetMedian( numberList: {number}-- The dataset to perform the action on. ) → number Gets the number that is in the middle of the dataset, more info can be found here. Here's an example scenario: local CollectedData = {6, 8, 3, 7, 9, 0, 4, 1} print(Statistics.GetMedian(CollectedData)) -- Output: 8   "},{"title":"GetMean​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#GetMean","content":"&lt;/&gt; Statistics.GetMean( numberList: {number}-- The dataset to perform the action on. ) → number Gets the most common number in the dataset, more info can be found here. Here's an example scenario: local CoinsForPlayers = {651, 8801, 371, 79, 918, 0, 46, 183} print(Statistics.GetMean(CoinsForPlayers)) -- Get the average amount of coins each player has, keep in mind 8801 will skew the data. -- Output: 1381.125   "},{"title":"GetMode​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#GetMode","content":"&lt;/&gt; Statistics.GetMode( numberList: {number}-- The dataset to perform the action on. ) → number? Gets the number that occurs most in the provided dataset, nil if none or each number occurs the same amount of times. More info can be found here "},{"title":"Sprite","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Sprite","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Sprite","url":"/CanaryEngine/api/Sprite#functions","content":" "},{"title":"Animate​","type":1,"pageTitle":"Sprite","url":"/CanaryEngine/api/Sprite#Animate","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Sprite.Animate( image: ImageLabel ,-- The image label that the sprite should be animated on imageSize: Vector2 ,-- The size of the image frames: Vector2 ,-- The amount of frames on both the X and Y axis fps: number?,-- The amount of frames per second that the sprite should be played at. Defaults to 30 imageId: string?-- The image id that the image label should be set to, defaults to the initial image of the image label ) → () Animates the given sprite to play like a GIF.  "},{"title":"StopAnimation​","type":1,"pageTitle":"Sprite","url":"/CanaryEngine/api/Sprite#StopAnimation","content":"&lt;/&gt; Sprite.StopAnimation( image: ImageLabel -- The image label that should stop being animated ) → () Stops the currently playing animation, if any. "},{"title":"Utility","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Utility","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#functions","content":" "},{"title":"nilparam​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#nilparam","content":"&lt;/&gt; Utility.nilparam( param: T?,-- The param to check the value of. default: T-- The default value to be provided if param is nil. ) → T Checks if param is nil, and if it is, it will return the provided default value.  "},{"title":"GenerateUUID​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#GenerateUUID","content":"&lt;/&gt; Utility.GenerateUUID() → string Generates a unique identifier that will not be the same of any others. Short for Universally Unique IDentifier UUID Wikipedia  "},{"title":"GetPlayersInRange​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#GetPlayersInRange","content":"&lt;/&gt; Utility.GetPlayersInRange( comparePoint: Vector3 ,-- The point to which should be compared from, can be a parts position for example maximumRange: number-- The maximum range of which to get players from the comparePoint ) → {Player } Returns a table of all of the players that are in a specified range from comparePoint.  "},{"title":"DictionaryToArray​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#DictionaryToArray","content":"&lt;/&gt; Utility.DictionaryToArray( d: {[a]: b}-- The dictionary to convert. ) → {{a | b}}? Converts a dictionary to an array, can be useful for when cutting down on data costs. It essentially serializes a dictionary.  "},{"title":"ArrayToDictionary​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#ArrayToDictionary","content":"&lt;/&gt; Utility.ArrayToDictionary( t: {{a | b}}-- The array to convert. ) → {[a]: b}? Converts an array to a dictionary, this is basically the deserializer for Utility.DictionaryToArray.  "},{"title":"GetAncestors​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#GetAncestors","content":"&lt;/&gt; Utility.GetAncestors( instance: Instance -- The instance to get the ancestors of. ) → {Instance } Returns every ancestor of instance, excluding the DataModel "},{"title":"TopBarSpacerObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/TopBarSpacerObject","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#types","content":" "},{"title":"TopBarSpacer​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#TopBarSpacer","content":"&lt;/&gt; interface TopBarSpacer { Name: string Order: number Area: number SetSpacerEnabled: ( self: TopBarIcon, enabled: boolean ) → () SetSpacerSize: ( self: TopBarSpacer, size: number ) → () Destroy: (self: TopBarIcon) → () }  "},{"title":"Properties​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#Name","content":"&lt;/&gt; TopBarSpacerObject.Name: string The name of the spacer.  "},{"title":"Order​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#Order","content":"&lt;/&gt; TopBarSpacerObject.Order: number The layout order of the spacer.  "},{"title":"Area​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#Area","content":"&lt;/&gt; TopBarSpacerObject.Area: number The area of the spacer. 1 is Left and 2 is Right. "},{"title":"Functions​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#functions","content":" "},{"title":"SetSpacerEnabled​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#SetSpacerEnabled","content":"&lt;/&gt; TopBarSpacerObject:SetSpacerEnabled( enabled: boolean-- Whether or not the spacer should be enabled ) → () Sets whether or not the spacer should be enabled.  "},{"title":"SetSpacerSize​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#SetSpacerSize","content":"&lt;/&gt; TopBarSpacerObject:SetSpacerSize( size: number-- The size to set the spacer to ) → () Sets the size of the spacer on the X scale.  "},{"title":"Destroy​","type":1,"pageTitle":"TopBarSpacerObject","url":"/CanaryEngine/api/TopBarSpacerObject#Destroy","content":"&lt;/&gt; TopBarSpacerObject:Destroy() → () Destroys the spacer itself, removing it from the topbar. "},{"title":"TopBarIconObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/TopBarIconObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#properties","content":" "},{"title":"Image​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Image","content":"&lt;/&gt; TopBarIconObject.Image: string | number The image to display on the icon.  "},{"title":"Name​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Name","content":"&lt;/&gt; TopBarIconObject.Name: string The name of the icon.  "},{"title":"Order​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Order","content":"&lt;/&gt; TopBarIconObject.Order: number The layout order of the icon.  "},{"title":"Area​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Area","content":"&lt;/&gt; TopBarIconObject.Area: number The area of the icon. 1 is Left and 2 is Right.  "},{"title":"StateChanged​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#StateChanged","content":"Event &lt;/&gt; TopBarIconObject.StateChanged: SignalController&lt;string&gt; Fires whenever the state of the icon changes. For example: Hovering -&gt; Default  "},{"title":"Activated​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Activated","content":"Event &lt;/&gt; TopBarIconObject.Activated: SignalController&lt;Enum.UserInputType&gt; Fires when the icon is activated, by any supported input type. Also passes in the user input type enum.  "},{"title":"NoticeAdded​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#NoticeAdded","content":"Event &lt;/&gt; TopBarIconObject.NoticeAdded: SignalController&lt;number&gt; Fires whenever a notice is added to the icon.  "},{"title":"Notices​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Notices","content":"&lt;/&gt; TopBarIconObject.Notices: number The amount of notices the icon actually has.  "},{"title":"NoticeCap​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#NoticeCap","content":"&lt;/&gt; TopBarIconObject.NoticeCap: string The notice cap string, an example of this is &quot;99+&quot; for the default.  "},{"title":"CurrentState​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#CurrentState","content":"&lt;/&gt; TopBarIconObject.CurrentState: string Describes the current state of the icon, works like how TopBarIconObject.StateChanged does. "},{"title":"Functions​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#functions","content":" "},{"title":"SetIconEnabled​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#SetIconEnabled","content":"&lt;/&gt; TopBarIconObject:SetIconEnabled( enabled: boolean-- Whether or not to enable the icon ) → () Sets the status of the icon visibility.  "},{"title":"SetIconNotices​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#SetIconNotices","content":"&lt;/&gt; TopBarIconObject:SetIconNotices( notices: number?,-- The amount of notices to add, leaving this nil will add a single notice noticeCap: number?-- When to display a + sign after a set amount of notices, defaults to 99 ) → () Adds notices to the parent topbar icon.  "},{"title":"BindKeyCodes​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#BindKeyCodes","content":"&lt;/&gt; TopBarIconObject:BindKeyCodes( keyCodes: {Enum.KeyCode}?-- The key codes to listen to, if it is nil it will reset to no key codes ) → () Binds multiple key codes to activate the icons Activated event.  "},{"title":"SetImageSize​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#SetImageSize","content":"&lt;/&gt; TopBarIconObject:SetImageSize( imageSize: Vector2 -- The size to set the image to ) → () Sets the image size of the icon, default is filled.  "},{"title":"Destroy​","type":1,"pageTitle":"TopBarIconObject","url":"/CanaryEngine/api/TopBarIconObject#Destroy","content":"&lt;/&gt; TopBarIconObject:Destroy() → () Destroys the icon itself, removing it from the topbar. "},{"title":"UIShelf","type":0,"sectionRef":"#","url":"/CanaryEngine/api/UIShelf","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#types","content":" "},{"title":"UIShelf​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#UIShelf","content":"&lt;/&gt; interface UIShelf { CreatedIcons: {TopBarIcon} CreateIcon: (properties: {string | number}) → (TopBarIcon) }  "},{"title":"Properties​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#properties","content":" "},{"title":"CreatedIcons​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#CreatedIcons","content":"&lt;/&gt; UIShelf.CreatedIcons: {TopBarIcon} A table of every topbar icon created. "},{"title":"Functions​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#functions","content":" "},{"title":"CreateIcon​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#CreateIcon","content":"&lt;/&gt; UIShelf.CreateIcon( properties: {string | number}-- The properties to set on the icon ) → TopBarIconObject "},{"title":"Types","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf##","content":""},{"title":"​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#TopBarIcon","content":"interface TopBarIcon { Image: string | number Name: string Order: number Area: number SetImageSize: ( self: TopBarIcon, imageSize: Vector2 ) → () SetIconEnabled: ( self: TopBarIcon, enabled: boolean ) → () BindKeyCodes: ( self: TopBarIcon, keyCodes: {Enum.KeyCode}? ) → () SetIconNotices: ( self: TopBarIcon, notices: number ) → () Destroy: (self: TopBarIcon) → () }  Creates a new topbar icon, with declared properties.  "},{"title":"SetTopBarEnabled​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#SetTopBarEnabled","content":"&lt;/&gt; UIShelf.SetTopBarEnabled( enabled: boolean-- Whether or not to enable the topbar ) → () Creates a new topbar icon, with declared properties.  "},{"title":"CreateSpacer​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/api/UIShelf#CreateSpacer","content":"&lt;/&gt; UIShelf.CreateSpacer( properties: {string | number},-- The properties to set on the spacer bypass: boolean?-- Allows you to bypass the order restrictions, should only be used internally ) → TopBarSpacerObject Creates a new topbar spacer, acts a spacer to other icons. "},{"title":"Engine Recap - August 2023","type":0,"sectionRef":"#","url":"/CanaryEngine/blog/enginerecap-august2023","content":"","keywords":""},{"title":"More Debugger Resources​","type":1,"pageTitle":"Engine Recap - August 2023","url":"/CanaryEngine/blog/enginerecap-august2023#more-debugger-resources","content":"We have added 2 new functions and 1 new feature to the debug API. You can now Assert values, and clear the output / cache lists. Calling debug also adds items to the cache list. "},{"title":"Create Topbar Icons with UIShelf​","type":1,"pageTitle":"Engine Recap - August 2023","url":"/CanaryEngine/blog/enginerecap-august2023#create-topbar-icons-with-uishelf","content":"The new library UIShelf, you can now create topbar icons that mimic the CoreGui 1:1. We've taken into account every single design aspect that the top bar button has and have been able to replicate it. "},{"title":"Network Controller Improvements​","type":1,"pageTitle":"Engine Recap - August 2023","url":"/CanaryEngine/blog/enginerecap-august2023#network-controller-improvements","content":"You can now set a client timeout for network controllers, allowing you to minimize timeout errors. This should fix most of the issues you guys have been having as of late. "},{"title":"Documentation Improvements​","type":1,"pageTitle":"Engine Recap - August 2023","url":"/CanaryEngine/blog/enginerecap-august2023#documentation-improvements","content":"We have improved the documentation site! Coming with 4 new detailed tutorials, more API documentation, and this new blog! We will post engine recaps like this here and they will be exclusive to this website. New API sections have also been added to help organize it. "},{"title":"Plugin Improvements​","type":1,"pageTitle":"Engine Recap - August 2023","url":"/CanaryEngine/blog/enginerecap-august2023#plugin-improvements","content":"We have improved the plugin a little bit (no rebuild yet) and have stopped a few more bugs from popping up. BridgeNet has also been updated to 0.5.4. We are planning lots more for the future, and we will be adding the HintService library soon once it is revamped.  If you're interested in contributing, please make a PR on our GitHub! "},{"title":"Engine Recap - July 2023","type":0,"sectionRef":"#","url":"/CanaryEngine/blog/enginerecap-july2023","content":"","keywords":""},{"title":"Anonymous Signals​","type":1,"pageTitle":"Engine Recap - July 2023","url":"/CanaryEngine/blog/enginerecap-july2023#anonymous-signals","content":"First off, we have added the AnonymousSignal API thanks to @koxx12. This allows you to create signals that are only referenced once, and not cached. local MyNewAnonymousSignal = CanaryEngine.CreateAnonymousSignal() -- this is the only reference held to the signal controller!  "},{"title":"Updated Benchmark Library​","type":1,"pageTitle":"Engine Recap - July 2023","url":"/CanaryEngine/blog/enginerecap-july2023#updated-benchmark-library","content":"We have updated the Benchmark library to provide more accurate information, and more useful information such as longest benchmark and shortest. This will allow you to get a more in-depth result of your testing, allowing you to create even better code! "},{"title":"EngineReplicatedFirst​","type":1,"pageTitle":"Engine Recap - July 2023","url":"/CanaryEngine/blog/enginerecap-july2023#enginereplicatedfirst","content":"We have added a folder for ReplicatedFirst! Now you can have custom loader scripts, or startup scripts still run without being deattached from the framework. This also lets us execute our next feature... "},{"title":"Engine Loader​","type":1,"pageTitle":"Engine Recap - July 2023","url":"/CanaryEngine/blog/enginerecap-july2023#engine-loader","content":"Introducing the engine loader! This is a custom loading screen made directly for CanaryEngine, and it functions better in performance than most loading screens. It also shares extensive info, like the current asset completed percentage, and even failed assets once finished! You can view the API under Engine API &gt; EngineLoader. "},{"title":"roblox-ts Typings​","type":1,"pageTitle":"Engine Recap - July 2023","url":"/CanaryEngine/blog/enginerecap-july2023#roblox-ts-typings","content":"You can now use CanaryEngine with the new roblox-ts typings. Lots of people requested this feature and it is finally here! "},{"title":"Other Improvements​","type":1,"pageTitle":"Engine Recap - July 2023","url":"/CanaryEngine/blog/enginerecap-july2023#other-improvements","content":"Improves typesFixes plugin bugsFixes SignalControllers not working at allFixes other small bugs  If you're interested in contributing, please make a PR on our GitHub! "},{"title":"Engine Recap - June 2023","type":0,"sectionRef":"#","url":"/CanaryEngine/blog/enginerecap-june2023","content":"","keywords":""},{"title":"New Plugin​","type":1,"pageTitle":"Engine Recap - June 2023","url":"/CanaryEngine/blog/enginerecap-june2023#new-plugin","content":"Since the last plugin was just a few buttons, we wanted to do a UI approach instead. This allows us to improve the UX of the plugin, and make it more advanced then ever. Some new features include specific package installation and auto updating. "},{"title":"Reworked Data Saving​","type":1,"pageTitle":"Engine Recap - June 2023","url":"/CanaryEngine/blog/enginerecap-june2023#reworked-data-saving","content":"With the new data saving methods, it's even easier to save data for your game. The code has been improved to be more efficient, and it now has better API methods than previously. Custom key patterns are also now a thing, along with data editing via tables instead of get/set methods. "},{"title":"Reworked Networking​","type":1,"pageTitle":"Engine Recap - June 2023","url":"/CanaryEngine/blog/enginerecap-june2023#reworked-networking","content":"The networking system has been completely changed, and are NetworkControllers are no longer called NetworkSignals. This is mainly because they now support server invocation, and have a lot more methods than previously. "},{"title":"Name Param for CreateSignal​","type":1,"pageTitle":"Engine Recap - June 2023","url":"/CanaryEngine/blog/enginerecap-june2023#name-param-for-createsignal","content":"Previously, CanaryEngine.CreateSignal would not allow you to take in names, which requires you to create a custom caching system. This update changes that and you can now declare a name for your signals. All signals can now be accessed through scripts in the same environment as long as the names are matching. "},{"title":"Entirely New Documentation​","type":1,"pageTitle":"Engine Recap - June 2023","url":"/CanaryEngine/blog/enginerecap-june2023#entirely-new-documentation","content":"The documentation has been completely revamped, and now is hosted on a moonwave site. All API methods and properties are now documented.  If you're interested in contributing, please make a PR on our GitHub! "},{"title":"Featured","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/featured","content":"","keywords":"roblox game trailer featured framework"},{"title":"Gorytown 2​","type":1,"pageTitle":"Featured","url":"/CanaryEngine/docs/featured#gorytown-2","content":"Trailer:  "},{"title":"Features","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/features","content":"Features Type Safe 🦺 Strictly typed, along with native support for roblox-ts. Context-specific API 🖥️ The API is aimed to be completely separate the server and the client, which allows for a better type checking experience. Fully Documented 📚 The entire framework is documented, along with tutorials on each subject. Optimized 🏃‍♀️ Extremely optimized, with most internal functions running fast along with custom signal and network implementations. Secure 🔐 The networking system that CanaryEngine uses can actually partially prevent exploits like RemoteSpy from being easily useable. Node Package 📦 Comes with a native node package for all of you power users on the command line, with Rojo support by default. ... and much more!","keywords":"roblox game framework features type safe optimized secure documented"},{"title":"Comparison","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/comparison","content":"Comparison It really comes down on your use case, if you are just starting up a short project that needs some easy organization, I would consider using CanaryEngine, even larger projects would suit your use of it. Each framework has each of their own disadvantages and advantages, so it's ultimately up to you to decide what you should use and what suits you best. I always thought many other frameworks available were challenging to learn (at least for me) so I created this framework instead.","keywords":"roblox game framework compare which project organization"},{"title":"Installation","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/installation","content":"","keywords":"roblox game framework install tutorial github node"},{"title":"Roblox Marketplace​","type":1,"pageTitle":"Installation","url":"/CanaryEngine/docs/getstarted/installation#roblox-marketplace","content":"Navigate to the install page of the Canary Studio plugin, you can find that hereOpen Roblox Studio and install the plugin from within your plugin inventory. "},{"title":"Github​","type":1,"pageTitle":"Installation","url":"/CanaryEngine/docs/getstarted/installation#github","content":"Navigate to the latest release of CanaryEngine on Github, you can find that hereChoose CanaryStudioPlugin.rbxm to download.Open Roblox Studio, and drag CanaryStudioPlugin.rbxm from your download directory into studio.Right click the plugin, and choose Save as Local Plugin "},{"title":"NPM​","type":1,"pageTitle":"Installation","url":"/CanaryEngine/docs/getstarted/installation#npm","content":"Open the command line of your choice, set the directory to the project folder that you wish.Install Node if you haven't already, you can find that hereAfter installing Node, enter the following in your command line: npm i @rbxts/canaryengine "},{"title":"Custom Loading Screen","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/customloader","content":"","keywords":"roblox game framework loading content provider default"},{"title":"Enabling​","type":1,"pageTitle":"Custom Loading Screen","url":"/CanaryEngine/docs/tutorials/customloader#enabling","content":"To enable the default loading screen, simply tick the attribute to allow the screen to be used:  "},{"title":"Start Loader​","type":1,"pageTitle":"Custom Loading Screen","url":"/CanaryEngine/docs/tutorials/customloader#start-loader","content":"To start the loader, you can use the EngineLoader.StartLoad function. This allows you to customize the loader a bit and have it fit your game. Here's an example of some loading screen code that you can use as a reference: local Internal = script.Parent.Parent.Internal local EngineLoader = require(Internal.EngineLoader) EngineLoader.StartLoad( { &quot;rbxassetid://123&quot;, &quot;rbxassetid://456&quot; }, -- etc. { [&quot;This is a message that will show!&quot;] = Color3.fromRGB(222, 255, 130) } ) EngineLoader.CustomizeInterface({ LoadingSpinner = { Visible = false -- This will make it so the loading spinner no longer shows } })  You can do lots more with this, but for the sake of simplicity, you can view the API documentation instead. "},{"title":"About","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/intro","content":"About CanaryEngine is the all new framework for all your games and projects, no matter the size of them. I've personally used it for all of my projects, and it works great despite the scale of each one. I designed the framework to have a super optimized networking and signal system. It combines the usage of @ffrostfall's BridgeNet2 and and @stravant's GoodSignal modules, which helps it be optimized by a ton. It also comes with many other libraries built in, such as @commitblue's BlueSerializer and the framework's own Utility, Benchmark, and Statistics modules. They each cover many of the edge cases that come up lots of times during the development process. A fine example of this is saving instances in datastores. It was made to be complex, but also easy to learn which is what mainly makes the framework stand out from the others. I have covered almost all of the API and libraries in our documentation, be sure to check that out before starting out with the framework. Our goal while creating this framework was to not intrude on the developers code, but instead let them customize their experience and give them basic tools along the way, such as the built-in networking system. I have found myself that this actually makes the process of developing a project way faster than before, and is just nicer to work with overall when stuff isn't practically shoved down your throat. We want you to have control over how your game functions, and not intrude on your unique process","keywords":"roblox game framework info learn"},{"title":"Questions","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/questions","content":"","keywords":"roblox game framework install tutorial github node"},{"title":"Installation + Usage​","type":1,"pageTitle":"Questions","url":"/CanaryEngine/docs/getstarted/questions#installation--usage","content":"Refer to the installation article hosted on our documentation site. From there, you can go to the next article in tutorials to learn more about the framework. If you need any additional help, feel free to reply to this post or shoot me a message on Discord. "},{"title":"Issues​","type":1,"pageTitle":"Questions","url":"/CanaryEngine/docs/getstarted/questions#issues","content":"Came across an issue in our code? Simply create a new issue on the GitHub repository or create a new bug report in our discord server linked above. "},{"title":"Plugin Errors​","type":1,"pageTitle":"Questions","url":"/CanaryEngine/docs/getstarted/questions#plugin-errors","content":"If you're plugin errors, it's most likely because you have an older version installed. If you don't, make sure to send a report using the guide. "},{"title":"Benchmark","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/libraries/benchmark","content":"","keywords":""},{"title":"Benchmarking a Function​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/docs/tutorials/libraries/benchmark#benchmarking-a-function","content":"Benchmarking a function is quite easy, and takes less time than the traditional ways while also bringing more features to the table. Here is a simple example of a function switching variable values each time it is run; local a, b = 0, 1 local MyBenchmark = Benchmark.CreateBenchmark() local BenchmarkResult = MyBenchmark:SetFunction(500, function() a, b = b, a end) print(BenchmarkResult) -- Output: Shortest: 0.0018000009731622413ms Total: 0.04350000017439015ms Average: 0.02211200087549514ms Longest: 0.039200000173877925ms  Keep in mind that the above actually returns a table, that when tostring is used on it, it will turn into a neat form as above. "},{"title":"Signals","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/customsignals","content":"","keywords":""},{"title":"SignalControllers​","type":1,"pageTitle":"Signals","url":"/CanaryEngine/docs/tutorials/customsignals#signalcontrollers","content":"Firing and connecting to signals should be as simple as possible. If you are familiar with the RBXScriptSignal, then it should be easy enough to learn SignalController's. As common knowledge, firing + connecting is identical across both the NetworkController and SignalController. Here's an example of an event being fired and connected to: local TestSignal = CanaryEngine.CreateSignal(&quot;NewSignal&quot;) TestSignal:Connect(function(data) print(data) -- Output: {&quot;Hello,&quot;, &quot;player&quot;} end) TestSignal:Fire({ &quot;Hello,&quot;, &quot;player&quot; })  SignalController also share identical methods with the RBXScriptSignal, such as including SignalController:Once and even a SignalController:Wait method. Though, an extra feature that comes with using @stravant's signal implementation is that you have the ability to disconnect every connection associated with the signal. This allows for quick cleanups of a signal. "},{"title":"AnonymousSignals​","type":1,"pageTitle":"Signals","url":"/CanaryEngine/docs/tutorials/customsignals#anonymoussignals","content":"Anonymous signals are a special type of signal that can be only used from this refrence. These are signals that are not stored in any way by default compared to SignalController, and are meant to be used for objects and events, and not for script communcation. They are created by using the CanaryEngine.CreateAnonymousSignal method. Here's an example of an anonymous signal being used: local AnonymousSignal = CanaryEngine.CreateAnonymousSignal() local AnonymousSignal2 = CanaryEngine.CreateAnonymousSignal() -- no name conflicts! AnonymousSignal:Connect(function(data) print(data) -- Output: &quot;{&quot;Signal 1&quot;}&quot; end) AnonymousSignal:Fire({ &quot;Signal 1&quot; }) AnonymousSignal2:Connect(function(data) print(data) -- Output: &quot;{&quot;Signal 2&quot;}&quot; end) AnonymousSignal2:Fire({ &quot;Signal 2&quot; })  Anonymous signals share identical methods with SignalController so there is nothing new to learn here. "},{"title":"ControllerConnections​","type":1,"pageTitle":"Signals","url":"/CanaryEngine/docs/tutorials/customsignals#controllerconnections","content":"ControllerConnection's are what is returned by SignalController's, these allow you to check the current connection status with ControllerConnection.Connected and allow you to disconnect any connections you made, either by using SignalController:Connect or SignalController:Once, by using the ControllerConnection:Disconnect method. These are identical to the RBXScriptConnection, so documentation isn't really needed with this. That's really all for SignalController, they are a fairly simple concept and are extremely useful in many varied ways. "},{"title":"Debugger","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/libraries/debugger","content":"","keywords":""},{"title":"Simple Debugging​","type":1,"pageTitle":"Debugger","url":"/CanaryEngine/docs/tutorials/libraries/debugger#simple-debugging","content":"On the basic side, the Debugger.Debug function will allow you to provide some sort of handler, example of this could be print or error, then you can supply messages in either a table or just a single value. You can also provide a custom prefix and choose whether or not to respect the debugger settings (Recommended on at all times). Here's a basic example of a print message: Debugger.Debug(print, {&quot;Hello!&quot;, &quot;it's&quot;, &quot;me!&quot;}) -- Output: [Debugger]: Hello! it's me!  Once again, this function will respect the LiveGameDebugger and StudioDebugger settings. LiveGameDebugger is off by default and can be toggled via framework install settings or by using the attribute on the folder itself. "},{"title":"Call Stack / Type Errors​","type":1,"pageTitle":"Debugger","url":"/CanaryEngine/docs/tutorials/libraries/debugger#call-stack--type-errors","content":"Another cool feature of the debug library is that you can get a full and quite detailed call stack, from the line it was called from to the cleaned up path to the script/package and the name you provided. Here's a basic example where you would place your script inside of EngineClient.Scripts: print(Debugger.GetCallStack(script, &quot;MyStack&quot;)) -- Output: { [&quot;DefinedLine&quot;] = 19, [&quot;Name&quot;] = &quot;MyStack&quot;, [&quot;Source&quot;] = &quot;EngineClient.Scripts.ClientScript&quot; }  The last feature of the debugger library is that you can create type errors that mimic Luau's with ease. Here's an example of how you would generate one and what it would produce: Debugger.DebugInvalidData(1, &quot;MyFunction&quot;, &quot;Vector3&quot;, paramThatErrored) -- Output (Error): invalid argument #1 to 'MyFunction' (Vector3 expected, got number)  "},{"title":"Data Management","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/datastoring","content":"","keywords":""},{"title":"Profile Stores​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#profile-stores","content":"If you have ever used ProfileService before, you have probably heard of the ProfileStore. It's basically just a GlobalDataStore, but instead of managing keys, it manages individual profiles instead. These profiles are assigned to a unique ID, so they can be assigned to the player's UserId, or it can be it's own thing. Though, first, lets create a new ProfileStore using the DataService.CreateProfileStore function: local DataService = CanaryEngineServer.Data local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}})  After this, you can declare the key pattern if you want to. This is optional though, and the default is 'user_%d' for compatibility with older versions. Though, I recommend just changing to '%d', so it only contains the player's UserId. local DataService = CanaryEngineServer.Data local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- Change the pattern if you want to, it's better for usage  Now, we can detect when the player joins, and when they do, we can load in their data by using ProfileStoreObject:LoadProfileAsync. This will load in the profile and allow you to interact with the data. Here's how you would do that: local DataService = CanaryEngineServer.Data local PlayerService = game:GetService(&quot;Players&quot;) local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- // Functions local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) -- Load the profile, you can also add an optional `reconcile` argument which reconciles the data end PlayerService.PlayerAdded:Connect(PlayerAdded)  Now sometimes, the player will join before the server script runs. To fix this, we can loop through all of the players after we listen to the player added event, then run the player added function: local DataService = CanaryEngineServer.Data local PlayerService = game:GetService(&quot;Players&quot;) local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- // Functions local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) end PlayerService.PlayerAdded:Connect(PlayerAdded) for _, player in PlayerService:GetPlayers() do task.spawn(PlayerAdded, player) end  Now we are all set! But first, we have to make sure to unclaim the session lock when the player leaves. Doing this is pretty simple, just add this to your script: PlayerService.PlayerRemoving:Connect(function(player) MyNewDataStore:UnclaimSessionLock(player) end)  "},{"title":"Profiles​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#profiles","content":"Now we can get started on profiles. As explained in the introduction, profiles are essentially the successor to datastore keys. These are much easier to use and make the process of data saving so much easier. Setting the data here is as simple as editing a table. No getter or setter functions, you can make your own. What we will do first is get the data we can edit from the profile. In order to do this, you must call PlayerProfile:GetProfileData. local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) local ProfileData = PlayerProfile:GetProfileData() print(ProfileData) -- Output: {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}} end  Now that we have verified that our code is indeed working, we can now edit the values in the profile data dictionary as so: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) local ProfileData = PlayerProfile:GetProfileData() print(ProfileData) -- Output: {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}} table.insert(ProfileData.Items, &quot;Iron Sword&quot;) print(ProfileData) -- Output: {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;, &quot;Iron Sword&quot;}} end  We can do quite a bit with this, such as increase the user's cash each time they join, or even remove specific items. When we join back, the iron sword should persist if you set up the profile store correctly. Though, there is one more thing you should learn: GlobalKeys. "},{"title":"Leaderstats​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#leaderstats","content":"When using EasyProfile, Roblox's player list leaderstats are rather easy to setup. You only need to call 1 function. Here's an example of leaderstats being set up when the player joins: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) local ProfileData = PlayerProfile:GetProfileData() PlayerProfile:CreateProfileLeaderstats(player, {&quot;Cash&quot;, &quot;Gems&quot;}) end  When they join, your leaderboard should look just like this:  "},{"title":"Global Keys​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#global-keys","content":"Global keys are a better way of handling cross server communication with data, and you can even send data to offline UserId's. It uses the Global Updates feature of ProfileService internally, and that system is very confusing which is why we made our own. There's really only 3 functions to learn, so it should be pretty straightforward to learn. To start, we can create and setup our profile store just as how we did previously: local DataService = CanaryEngineServer.Data local PlayerService = game:GetService(&quot;Players&quot;) local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- // Functions local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) end PlayerService.PlayerRemoving:Connect(function(player) MyNewDataStore:UnclaimSessionLock(player) end) PlayerService.PlayerAdded:Connect(PlayerAdded) for _, player in PlayerService:GetPlayers() do task.spawn(PlayerAdded, player) end  First, in our PlayerAdded function, lets send a new global key out to ourselves by using the ProfileStoreObject:SetGlobalKeyAsync method: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) MyNewDataStore:SetGlobalKeyAsync(player.UserId, &quot;GlobalKeyTest&quot;, &quot;somerandomstringdata&quot;) -- The first argument is the player who is recieving it, and the others are the key name followed by the value end  To listen when the player recieves a new key in-game, you can use the ProfileObject.GlobalKeyAdded event, it will fire when a new key is added: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) PlayerProfile.GlobalKeyAdded:Connect(function(data) print(data[1]) -- Output: {Key = &quot;GlobalKeyTest&quot;, Value = {this = &quot;is a test&quot;}, KeyId = 1} end) MyNewDataStore:SetGlobalKeyAsync(player.UserId, &quot;GlobalKeyTest&quot;, &quot;somerandomstringdata&quot;) end  Please note that when doing this, you must wait around 60 seconds for the key to be recieved. Though next, we should setup a way for us to recieve keys that we got when were offline. In order to do this, you can use the ProfileObject:GetGlobalKeys method, it returns a table of global keys that we can loop through: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) for _, globalKey in PlayerProfile:GetGlobalKeys() do print(globalKey.Key, &quot;:&quot;, globalKey.Value) -- Output: {Key = &quot;GlobalKeyTest&quot;, Value = &quot;somerandomstringdata&quot;, KeyId = 1} end PlayerProfile.GlobalKeyAdded:Connect(function(data) print(data[1]) -- Output: {Key = &quot;GlobalKeyTest&quot;, Value = &quot;somerandomstringdata&quot;, KeyId = 2} end) MyNewDataStore:SetGlobalKeyAsync(player.UserId, &quot;GlobalKeyTest&quot;, &quot;somerandomstringdata&quot;) end  Please do note that there is a difference between GlobalKey's and regular keys. GlobalKey's are supposed to be global: they can be recieved globally, and regular keys are just for the individual player that owns the profile. "},{"title":"Extras​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#extras","content":"There are a few extra functions you should know about. Here is a table of them: Function\tDescriptionProfileObject:GetDataUsage\tAllows you to measure the size of the profile's data, in a percentage (%) ProfileObject:GetMetaData\tGets specific meta data about the profile, such as the amount of times it was loaded. ProfileStoreObject:GetProfileAsync\tGets the profile data for a specific UserId, useful for getting anyones data. You can not edit any values though. "},{"title":"Fetch","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/libraries/fetch","content":"","keywords":""},{"title":"Get Requests​","type":1,"pageTitle":"Fetch","url":"/CanaryEngine/docs/tutorials/libraries/fetch#get-requests","content":"Making a get request is as easy as it is to do through HttpService:GetAsync, but it has a lot of new and exciting features. You can even use a parameter to decode content before it is receieved. Here is a simple example of Fetch in use: local LocationInfo = Fetch.FetchAsync(&quot;http://ip-api.com/json&quot;, true, 3) print(LocationInfo) -- Output: {...}  This will get the location info of the current server, and will decode it's content based on the provided bool. It will retry 3 times at max. "},{"title":"Caching​","type":1,"pageTitle":"Fetch","url":"/CanaryEngine/docs/tutorials/libraries/fetch#caching","content":"Caching is one of the big reasons why you would want to use Fetch, it allows you to specify a name for the cache and will store it in a table which you can access at any time unless removed. Here's how you would set it up: Fetch.FetchAsync(&quot;http://ip-api.com/json&quot;, true, 3, &quot;LocationInfo&quot;)  We can now fetch this info by doing a simple index!: Fetch.FetchAsync(&quot;http://ip-api.com/json&quot;, true, 3, &quot;LocationInfo&quot;) print(Fetch.RequestCache.LocationInfo) -- Output: {...}  And thats all there is to it. What it really does is save time on making your caching infastructure. Caching data is especially important when using API's, so you don't run into the request limit and possibly get blocked. "},{"title":"UIShelf","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/libraries/uishelf","content":"","keywords":""},{"title":"Creating an Icon​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/docs/tutorials/libraries/uishelf#creating-an-icon","content":"Creating an icon is rather simple, all it requires is the following 4 arguments wrapped in a table: NameImageOrderArea When inputting these into your table, they must be in correct order or the code will malfunction. The image can either be an id or a direct URI. The order is basically just the layout order, and will be correctly accomodated for depending on if it was placed on the left/right. The Area element decides which side the icon is on, 1 is the left side, while 2 is the right side. If you're confused, here is an example of it layed out: local Icon = UIShelf.CreateIcon({ &quot;MyFavoriteIcon&quot;, &quot;rbxassetid://12515281752&quot;, 1, 1, })  This will create a new and basic topbar icon on the left side of the screen, with an order of 1. "},{"title":"Respond to Input​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/docs/tutorials/libraries/uishelf#respond-to-input","content":"To respond to input of almost any type, you can use the TopBarIcon.Activated event. This event will fire every time the icon is clicked, whether that be by a mouse, keycode, touch tap, or gamepad, it will fire. This also has a Enum.UserInputType argument indicating which input type fired the event. Here's an example below, nothing special. Icon.Activated:Connect(function(data: {Enum.UserInputType}) print(data[1]) -- Output: Enum.UserInputType.MouseButton1 end)  "},{"title":"Add Notices​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/docs/tutorials/libraries/uishelf#add-notices","content":"Since the chat icon in the topbar has notices when the player hasn't opened their chat, so do UIShelf icons. These notices are created 1:1 with the original and by default have a notice cap of 99. This means when 100 notices is hit, the display will turn into 99+ instead of 100. Notifications aren't technically 'capped', rather just a display cap. The API to add notices takes to parameters; The amount of notices to add, leaving nil is 1The notice cap, leaving nil is 99 Here's an example of a single notice being added when the icon is clicked: local Icon = UIShelf.CreateIcon({ &quot;MyFavoriteIcon&quot;, &quot;rbxassetid://12515281752&quot;, 1, 1, }) Icon.Activated:Connect(function() Icon:SetIconNotices(1, nil) -- Prefered to leave nil if you don't need to change the limit. This cuts down on string interpolation since the result is cached end)  This will have the desired effect of adding a notice once per click/activation. "},{"title":"Spacers​","type":1,"pageTitle":"UIShelf","url":"/CanaryEngine/docs/tutorials/libraries/uishelf#spacers","content":"A UIShelf spacer object is what it is says it is: it's a spacer. This allows you to create spacers for other topbar items, such as an HD Admin topbar item. Please keep in mind that spacers and icons are mixed, so it's important to account for different orders. An example spacer, requires no other functions to run: local Spacer = UIShelf.CreateSpacer({ &quot;MySpacer&quot;, 1, 1, }) -- Same format as CreateIcon, just doesn't have image URI/ID element  "},{"title":"Package System","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/packages","content":"","keywords":""},{"title":"Inserting Packages​","type":1,"pageTitle":"Package System","url":"/CanaryEngine/docs/tutorials/packages#inserting-packages","content":"To insert a new package, simply use the 'Create New Instance' function of the plugin, then from there you can insert a new package, for either the client, to be replicated, or the server. From there, you can reference the module in your script and start using it! Here's an example of how you would grab a package from the server. "},{"title":"Inserting Scripts​","type":1,"pageTitle":"Package System","url":"/CanaryEngine/docs/tutorials/packages#inserting-scripts","content":"Inserting new scripts is also a very straightforward process and very similar to packages. First, create a new instance, then select either client script or server script from the dropdown menu. In order to reference a server-sided package, you must create a server script. Here's an example of how you would get your package from the script we just created: local Packages = CanaryEngineServer.Packages.Server local MyPackage = require(Packages.MyPackage) MyPackage.MyFunction()  "},{"title":"Package Vendor​","type":1,"pageTitle":"Package System","url":"/CanaryEngine/docs/tutorials/packages#package-vendor","content":"You may notice that when you create a new package it has a child named 'Vendor'. In a lot of languages, a vendor is an easy way to prevent recursiveness, and that's what we are doing here. The vendor folder should automatically be referenced in your new package, from there you can insert dependencies of your package inside of vendor, and then import them inside the package. Another benefit to using a vendor folder is a less messy file structure, as packages just referencing others back and forth can start to be a huge problem for anyones codebase. "},{"title":"Style Guide","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/styleguide","content":"","keywords":""},{"title":"General Style​","type":1,"pageTitle":"Style Guide","url":"/CanaryEngine/docs/tutorials/styleguide#general-style","content":"Most scripts and packages use a similar style, but here is a general guide that everything should follow: Variables All variables should be PascalCase.Function Declaration All functions should be PascalCase.Function Arguments Function arguments should always be camelCase, no matter what.Tables Tables follow the same rules as do variables, though empty ones should be declared as { }.Typings Since types are an integral part of anyones workflow, types should be neat. All types should be PascalCase, and should be declared like this var: type. "},{"title":"Commenting​","type":1,"pageTitle":"Style Guide","url":"/CanaryEngine/docs/tutorials/styleguide#commenting","content":"To avoid messy and unreadable code, make sure to make heavy use of comments. This will allow you to know what your code does at a first glance, which helps out with future updates. In scripts and packages, you should, by default, always declare where functions, variables, and where running code should be placed. -- // Variables local MyVariable = 1 -- // Functions local function MyFunction() print(&quot;Added new instance to workspace!&quot;) end -- // Connections workspace.ChildAdded:Connect(myFunction) -- // Actions print(&quot;Hello, world!&quot;)  You can also create your own custom versions of these comments, just by following the same format and giving them a different name. "},{"title":"File Structure","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/structure","content":"File Structure The CanaryEngine file structure aims to be easy to understand, easy to edit, and extremely customizable. Here's a look at the default file structure: Notice how Media and Packages each have their own context specific folders? In each of these folders, goes the content for that context. For example, EngineServer/Media/ shares the same behavior with ServerStorage. In this case, replicated shares behavior with ReplicatedStorage. The only acception here is with the EngineScripts folder, you cannot have a replicated script which runs both client and server sided as of writing this. You can organize these folders however you want, by adding new folders inside and placing new content inside. Please note that the folders already inside each media folder is just a template for easy startups, this does not have to be kept the way it is. Another feature of CanaryEngine is the way you can create your own file structure, in the plugin, all you have to do is select the destination folders for each folder that is required. (eg: Media, Packages, and Scripts). Doing this also allows you to organize more of your own way. Have lots of libraries you need to store? Just create a new 'Libraries' folder that can be used alongside the required ones! As a conclusion, do not move any folders that have already been placed where they are (aside from the folders inside of media), as it will cause CanaryEngine to error.","keywords":""},{"title":"Networking","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/networking","content":"","keywords":""},{"title":"RemoteEvents​","type":1,"pageTitle":"Networking","url":"/CanaryEngine/docs/tutorials/networking#remoteevents","content":"Instead of interacting with the normal RemoteEvent API, we use a custom method which is much more compatible with many game's standards. Though, to first create a new controller, use the .CreateNetworkController function in the context specific framework. In this tutorial, we assume the server is trying to send information to the client. Here's an example of how you would set up the network controller: local SendInfoNetwork = CanaryEngineServer.CreateNetworkController(&quot;SendInfoNetwork&quot;) print(SendInfoNetwork.Name) -- Output: SendInfoNetwork  Now lets set up the network controller to be client-sided as well: local SendInfoNetwork = CanaryEngineClient.CreateNetworkController(&quot;SendInfoNetwork&quot;)  Now lets continue this code and make it so it can recieve info from the server: local SendInfoNetwork = CanaryEngineClient.CreateNetworkController(&quot;SendInfoNetwork&quot;) SendInfoNetwork:Connect(function(data) print(data) end)  Though, we have a problem. SendInfoNetwork is not recieving anything on the client if nothing is being fired from the server. To pass data through the network controller, you can use NetworkController:Fire. Here's how we would do that on the server: local SendInfoNetwork = CanaryEngineServer.CreateNetworkController(&quot;SendInfoNetwork&quot;) local PlayerService = game:GetService(&quot;Players&quot;) print(SendInfoNetwork.Name) -- Output: SendInfoNetwork SendInfoNetwork:FireAll({ -- When sending data on the server, you must pass a player argument. In this example though, we are firing to all players. &quot;Sent through a&quot;, &quot;Network controller!&quot; })  danger You cannot really create a replicated network controller. This is because it would be accessed both by the server/client, so you would have to explicity check if is the server or client. This is considered a bad practice anyway, you shouldn't be using server or client exclusive things with shared packages. When we start the script, we should then see the the name in the output, and also see the following in the client output: { &quot;Sent through a&quot;, &quot;Network controller!&quot; }  Please keep in mind that these can be used for many other things other than just passing strings through, also that if you just have a single piece of data you can send it through the fire method without wrapping it in a table. Though, keep in mind that the data you recieve will always be a table no matter how you pass the data originally. danger You can in fact pass dictionaries through fire functions, but keep in mind these are bandwith-heavy and should be arrays instead. We also have available the Fire, FireExcept and SetRateLimit functions. Each of them are documented in their own API page. "},{"title":"RemoteFunctions​","type":1,"pageTitle":"Networking","url":"/CanaryEngine/docs/tutorials/networking#remotefunctions","content":"The RemoteFunction is a fairly straightforward way of sending and recieving data at the same time. For now, we only support invoking the server as invoking the client is fairly useless at this point. If you need this functionality, you can use the remote event part of the network controllers. You may already know how to set up the basic network controller, so here's just a basic example of the client asking the server for a value: Server:​ local ValueGetNetwork = CanaryEngineServer.CreateNetworkController(&quot;ValueGetNetwork&quot;) ValueGetNetwork:OnInvoke(function(sender, data) print(sender.Name) -- The player who sent the invoke's name if data[1] then return &quot;yes&quot; -- We must return a value here, or it will error else return &quot;no&quot; end end)  Client:​ Now on the client, we can invoke the server using NetworkController:InvokeAsync. We must send a boolean through to be checked on invoked. local ValueGetNetwork = CanaryEngineClient.CreateNetworkController(&quot;ValueGetNetwork&quot;) print(ValueGetNetwork:InvokeAsync(true)) -- When the value is recieved, this should return &quot;yes&quot; according to the server code.  Obviously, this isn't quite a valid use case for invoking the server, but some valid use cases include asking the server for a specific value. What we are doing here is just a waste of bandwidth, but for the sake of the tutorial I will be including this. "},{"title":"Framework Updates","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/update","content":"","keywords":"roblox game framework update tutorial"},{"title":"Reminders​","type":1,"pageTitle":"Framework Updates","url":"/CanaryEngine/docs/tutorials/update#reminders","content":"Whenever we create a new release on github, these changes are automatically pushed to the plugin via HttpService. This means that once you open studio, you will be prompted to update your version of CanaryEngine. Note that sometimes you will also have to update your plugin as well, so check to make sure that there are no actual plugin updates available. Not updating your plugin could result in some unexpected behavior such as this:  "},{"title":"Update Process​","type":1,"pageTitle":"Framework Updates","url":"/CanaryEngine/docs/tutorials/update#update-process","content":"First and foremost, update your Canary Studio plugin. This ensures that upon updating, your plugin is the most up-to-date and errors aren't likely to happen. You can find the plugin manager here:  If a plugin update is available, make sure to update your plugin for reasons mentioned before. Now that you have updated your plugin, open the Canary Studio Install Settings menu. This allows you to install, update, and uninstall frameworks. For updating, make sure to press the update button. You will be prompted to update, and then you are done! "}]