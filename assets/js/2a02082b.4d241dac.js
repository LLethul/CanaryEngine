"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},54701:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={},o="Style Guide",i={unversionedId:"tutorials/styleguide",id:"tutorials/styleguide",title:"Style Guide",description:"In CanaryEngine, scripts and packages use a specific style guide. This is a simple guide to follow, and this guide will allow you to create cleaner and more readable code for future updates and debugging.",source:"@site/docs/tutorials/styleguide.md",sourceDirName:"tutorials",slug:"/tutorials/styleguide",permalink:"/CanaryEngine/docs/tutorials/styleguide",draft:!1,editUrl:"https://github.com/canary-development/CanaryEngine/edit/main/docs/tutorials/styleguide.md",tags:[],version:"current",frontMatter:{},sidebar:"CanaryEngineSidebar",previous:{title:"Data Management",permalink:"/CanaryEngine/docs/tutorials/datastoring"},next:{title:"Featured",permalink:"/CanaryEngine/docs/featured"}},s={},u=[{value:"General Style",id:"general-style",level:3},{value:"Commenting",id:"commenting",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"style-guide"},"Style Guide"),(0,r.kt)("p",null,"In CanaryEngine, scripts and packages use a specific style guide. This is a simple guide to follow, and this guide will allow you to create cleaner and more readable code for future updates and debugging."),(0,r.kt)("h3",{id:"general-style"},"General Style"),(0,r.kt)("p",null,"Most scripts and packages use a similar style, but here is a general guide that ",(0,r.kt)("strong",{parentName:"p"},"everything")," should follow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Variables")," All variables should be ",(0,r.kt)("inlineCode",{parentName:"li"},"PascalCase"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function Declaration")," All functions should be ",(0,r.kt)("inlineCode",{parentName:"li"},"PascalCase"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function Arguments")," Function arguments should always be ",(0,r.kt)("inlineCode",{parentName:"li"},"camelCase"),", no matter what."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tables")," Tables follow the same rules as do variables, though empty ones should be declared as ",(0,r.kt)("inlineCode",{parentName:"li"},"{ }"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Typings")," Since types are an integral part of anyones workflow, types should be neat. All types should be ",(0,r.kt)("inlineCode",{parentName:"li"},"PascalCase"),", and should be declared like this ",(0,r.kt)("inlineCode",{parentName:"li"},"var: type"),".")),(0,r.kt)("h3",{id:"commenting"},"Commenting"),(0,r.kt)("p",null,"To avoid messy and unreadable code, make sure to make heavy use of comments. This will allow you to know what your code does at a first glance, which helps out with future updates. In scripts and packages, you should, by default, always declare where functions, variables, and where running code should be placed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'-- // Variables\n\nlocal MyVariable = 1\n\n-- // Functions\n\nlocal function MyFunction()\n    print("Added new instance to workspace!")\nend\n\n-- // Connections\n\nworkspace.ChildAdded:Connect(myFunction)\n\n-- // Actions\n\nprint("Hello, world!")\n')),(0,r.kt)("p",null,"You can also create your own custom versions of these comments, just by following the same format and giving them a different name."))}p.isMDXComponent=!0}}]);