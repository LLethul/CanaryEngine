"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9692],{46188:e=>{e.exports=JSON.parse('{"functions":[{"name":"nilparam","desc":"Checks if `param` is nil, and if it is, it will return the provided `default` value.","params":[{"name":"param","desc":"The param to check the value of.","lua_type":"T?"},{"name":"default","desc":"The default value to be provided if `param` is nil.","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","source":{"line":21,"path":"src/libraries/utility.lua"}},{"name":"GenerateUUID","desc":"Generates a unique identifier that will not be the same of any others. Short for **U**niversally **U**nique **ID**entifier\\n[UUID Wikipedia](https://en.wikipedia.org/wiki/Universally_unique_identifier)","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":35,"path":"src/libraries/utility.lua"}},{"name":"GetPlayersInRange","desc":"Returns a table of all of the players that are in a specified range from `comparePoint`.","params":[{"name":"comparePoint","desc":"The point to which should be compared from, can be a parts position for example","lua_type":"Vector3"},{"name":"maximumRange","desc":"The maximum range of which to get players from the `comparePoint`","lua_type":"number"}],"returns":[{"desc":"","lua_type":"{Player}"}],"function_type":"static","source":{"line":47,"path":"src/libraries/utility.lua"}},{"name":"DictionaryToArray","desc":"Converts a dictionary to an array, can be useful for when cutting down on data costs. It essentially serializes a dictionary.","params":[{"name":"d","desc":"The dictionary to convert.","lua_type":"{[a]: b}"}],"returns":[{"desc":"","lua_type":"{{a | b}}?"}],"function_type":"static","source":{"line":66,"path":"src/libraries/utility.lua"}},{"name":"ArrayToDictionary","desc":"Converts an array to a dictionary, this is basically the deserializer for `Utility.DictionaryToArray`.","params":[{"name":"t","desc":"The array to convert.","lua_type":"{{a | b}}"}],"returns":[{"desc":"","lua_type":"{[a]: b}?"}],"function_type":"static","source":{"line":83,"path":"src/libraries/utility.lua"}},{"name":"GetAncestors","desc":"Returns every ancestor of `instance`, excluding the [DataModel](https://create.roblox.com/docs/projects/data-model)","params":[{"name":"instance","desc":"The instance to get the ancestors of.","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"{Instance}"}],"function_type":"static","source":{"line":105,"path":"src/libraries/utility.lua"}}],"properties":[],"types":[],"name":"Utility","desc":"The Utility class.","source":{"line":6,"path":"src/libraries/utility.lua"}}')}}]);