"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6045],{32137:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[{"name":"ControllerConnection","desc":"A controller connection, similar to an [RBXScriptConnection]","fields":[{"name":"Disconnect","lua_type":"(self: ScriptConnection) -> ()","desc":""},{"name":"Connected","lua_type":"boolean","desc":""}],"private":true,"source":{"line":20,"path":"src/dynamic/types.lua"}},{"name":"SignalController","desc":"A signal controller, similar to an [RBXScriptSignal]","fields":[{"name":"Connect","lua_type":"(self: SignalController<T>?, func: (data: {T}) -> ()) -> (ControllerConnection)","desc":""},{"name":"Wait","lua_type":"(self: SignalController<T>?) -> ({T})","desc":""},{"name":"Once","lua_type":"(self: SignalController<T>?, func: (data: {T}) -> ()) -> (ControllerConnection)","desc":""},{"name":"Fire","lua_type":"(self: SignalController<T>?, data: ({T} | T)?) -> ()","desc":""},{"name":"DisconnectAll","lua_type":"(self: SignalController<T>?) -> ()","desc":""},{"name":"Name","lua_type":"string","desc":""}],"source":{"line":40,"path":"src/dynamic/types.lua"}},{"name":"ClientNetworkController","desc":"A ClientNetworkController is basically a mixed version of a [RemoteEvent] and [RemoteFunction]. It has better features and is more performant.","fields":[{"name":"Connect","lua_type":"(self: ClientNetworkController<T, U>?, func: (data: {T}) -> ()) -> (ControllerConnection)","desc":""},{"name":"Once","lua_type":"(self: ClientNetworkController<T, U>?, func: (data: {T}) -> ()) -> (ControllerConnection)","desc":""},{"name":"Wait","lua_type":"(self: ClientNetworkController<T, U>?) -> ({T})","desc":""},{"name":"Fire","lua_type":"(self: ClientNetworkController<T, U>?, data: ({T} | T)?) -> ()","desc":""},{"name":"InvokeAsync","lua_type":"(self: ClientNetworkController<T, U>?, data: ({T} | T)?) -> ({U})","desc":""},{"name":"DisconnectAll","lua_type":"(self: ClientNetworkController<T, U>?) -> ()","desc":""},{"name":"Name","lua_type":"string","desc":""}],"source":{"line":67,"path":"src/dynamic/types.lua"}},{"name":"ServerNetworkController","desc":"A ServerNetworkController is basically a mixed version of a [RemoteEvent] and [RemoteFunction]. It has better features and is more performant, though this is the server-sided API.","fields":[{"name":"Connect","lua_type":"(self: ServerNetworkController<T, U>?, func: (sender: Player, data: {T}) -> ()) -> (ControllerConnection)","desc":""},{"name":"Once","lua_type":"(self: ServerNetworkController<T, U>?, func: (sender: Player, data: {T}) -> ()) -> (ControllerConnection)","desc":""},{"name":"Wait","lua_type":"(self: ServerNetworkController<T, U>?) -> (Player, {T})","desc":""},{"name":"Fire","lua_type":"(self: ServerNetworkController<T, U>?, recipient: Player | {Player}, data: ({T} | T)?) -> ()","desc":""},{"name":"OnInvoke","lua_type":"(self: ServerNetworkController<T, U>?, callback: (sender: Player, data: {T}) -> ()) -> ()","desc":""},{"name":"SetRateLimit","lua_type":"(self: ServerNetworkController<T, U>?, maxInvokesPerSecond: number, invokeOverflowCallback: (sender: Player) -> ()) -> ()","desc":""},{"name":"DisconnectAll","lua_type":"(self: ServerNetworkController<T, U>?) -> ()","desc":""},{"name":"Name","lua_type":"string","desc":""}],"source":{"line":96,"path":"src/dynamic/types.lua"}}],"name":"Types","desc":"The parent of all classes.","source":{"line":8,"path":"src/dynamic/types.lua"}}')}}]);