"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3169],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},38267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={"sidebar-position":2},o="Signals",s={unversionedId:"tutorials/customsignals",id:"tutorials/customsignals",title:"Signals",description:"CanaryEngine's signal system is essentially the successor of the well-known BindableEvent, but no special quirks come with it. Some of these issues include common memory leaks and overall slowness. Our signal implementation simply uses @stravant's signal implementation which solely relies on the task scheduler to work.",source:"@site/docs/tutorials/customsignals.md",sourceDirName:"tutorials",slug:"/tutorials/customsignals",permalink:"/CanaryEngine/docs/tutorials/customsignals",draft:!1,editUrl:"https://github.com/canary-development/CanaryEngine/edit/main/docs/tutorials/customsignals.md",tags:[],version:"current",frontMatter:{"sidebar-position":2},sidebar:"CanaryEngineSidebar",previous:{title:"File Structure",permalink:"/CanaryEngine/docs/tutorials/structure"},next:{title:"Networking",permalink:"/CanaryEngine/docs/tutorials/networking"}},l={},c=[{value:"ScriptSignals",id:"scriptsignals",level:3},{value:"ScriptConnections",id:"scriptconnections",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"signals"},"Signals"),(0,r.kt)("p",null,"CanaryEngine's signal system is essentially the successor of the well-known ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/BindableEvent"},"BindableEvent"),", but no special quirks come with it. Some of these issues include common memory leaks and overall slowness. Our signal implementation simply uses ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/stravant"},"@stravant")),"'s signal implementation which solely relies on the task scheduler to work."),(0,r.kt)("h3",{id:"scriptsignals"},"ScriptSignals"),(0,r.kt)("p",null,"Firing and connecting to signals should be as simple as possible. If you are familiar with the ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptSignal"},"RBXScriptSignal"),", then it should be easy enough to learn ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal"),"'s. As common knowledge, firing + connecting is identical across both the ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkController")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal"),". Here's an example of an event being fired and connected to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local TestSignal = CanaryEngine.CreateSignal("NewSignal")\n\nTestSignal:Connect(function(data)\n    print(data) -- Output: {"Hello,", "player"}\nend)\n\nTestSignal:Fire({\n    "Hello,",\n    "player"\n})\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignals")," also share identical methods with the ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptSignal"},"RBXScriptSignal"),", such as including ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal:Once")," and even a ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal:Wait")," method. Though, an extra feature that comes with using ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/stravant"},"@stravant")),"'s signal implementation is that you have the ability to disconnect every connection associated with the signal. This allows for quick cleanups of a signal. "),(0,r.kt)("h3",{id:"scriptconnections"},"ScriptConnections"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ScriptConnection"),"'s are what is returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal"),"'s, these allow you to check the current connection status with ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptConnection.Connected")," and allow you to disconnect any connections you made, either by using ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal:Connect")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignal:Once"),", by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptConnection:Disconnect")," method. These are identical to the ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/RBXScriptConnection"},"RBXScriptConnection"),", so documentation isn't really needed with this."),(0,r.kt)("p",null,"That's really all for ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptSignals"),", they are a fairly simple concept and are extremely useful in many varied ways."))}m.isMDXComponent=!0}}]);