"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8366],{25436:e=>{e.exports=JSON.parse('{"functions":[{"name":"Fire","desc":"Fires an event which sends data to the server, equivalent to [RemoteEvent:FireServer]\\n\\n:::tip\\n\\nIf you\'re firing a single piece of data, there is no need to wrap it in a table!\\n\\n```lua\\nNetworkController:Fire(\\"Hello, world!\\")\\n```\\n\\n:::","params":[{"name":"data","desc":"The data that should be sent to the server","lua_type":"({any} | any)?"}],"returns":[],"function_type":"method","source":{"line":145,"path":"src/dynamic/networkcontroller.lua"}},{"name":"Once","desc":"Connects a function to the event that is fired when the server fires the network controller. When using `:Once`, the function is only run the first time and then the connection is disconnected automatically.","params":[{"name":"func","desc":"The function to call when data is recieved from the server","lua_type":"(data: {any}) -> ()"}],"returns":[{"desc":"","lua_type":"ScriptConnection"}],"function_type":"method","source":{"line":155,"path":"src/dynamic/networkcontroller.lua"}},{"name":"Connect","desc":"Connects a function to the event that is fired when the server fires the network controller.","params":[{"name":"func","desc":"The function to call when data is recieved from the server","lua_type":"(data: {any}) -> ()"}],"returns":[{"desc":"","lua_type":"ScriptConnection"}],"function_type":"method","source":{"line":168,"path":"src/dynamic/networkcontroller.lua"}},{"name":"Wait","desc":"Yields the current thread until the server fires the network controller.","params":[],"returns":[{"desc":"","lua_type":"{any}"}],"function_type":"method","yields":true,"source":{"line":181,"path":"src/dynamic/networkcontroller.lua"}},{"name":"InvokeAsync","desc":"Invokes the server, equivalent to [RemoteFunction:InvokeServer].","params":[{"name":"data","desc":"The data to invoke the server with","lua_type":"({any} | any)?"}],"returns":[{"desc":"","lua_type":"{any}"}],"function_type":"method","yields":true,"source":{"line":193,"path":"src/dynamic/networkcontroller.lua"}},{"name":"DisconnectAll","desc":"Disconnects all listeners from the current network controller.","params":[],"returns":[],"function_type":"method","source":{"line":200,"path":"src/dynamic/networkcontroller.lua"}}],"properties":[{"name":"Name","desc":"The name of the the network controller.","lua_type":"string","readonly":true,"source":{"line":26,"path":"src/dynamic/networkcontroller.lua"}},{"name":"_Connections","desc":"A list of connections.","lua_type":"{ScriptConnection}","private":true,"source":{"line":35,"path":"src/dynamic/networkcontroller.lua"}},{"name":"_Bridge","desc":"The bridge for use in BridgeNet.","lua_type":"ClientBridge","private":true,"readonly":true,"source":{"line":45,"path":"src/dynamic/networkcontroller.lua"}}],"types":[],"name":"NetworkControllerClient","desc":"The NetworkControllerServer class.","realm":["Client"],"source":{"line":16,"path":"src/dynamic/networkcontroller.lua"}}')}}]);