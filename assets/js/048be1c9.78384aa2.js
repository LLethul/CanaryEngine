"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[275],{46188:e=>{e.exports=JSON.parse('{"functions":[{"name":"nilparam","desc":"Checks if `param` is nil, and if it is, it will return the provided `default` value.","params":[{"name":"param","desc":"The param to check the value of.","lua_type":"T?"},{"name":"default","desc":"The default value to be provided if `param` is nil.","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","source":{"line":17,"path":"src/Utility.lua"}},{"name":"assert","desc":"Basically just [assert](https://create.roblox.com/docs/reference/engine/globals/LuaGlobals#assert), but more performant.","params":[{"name":"assertion","desc":"The param to check the value of.","lua_type":"T"},{"name":"msg","desc":"The error message to throw if `assertion` is not truthy.","lua_type":"string"},{"name":"...","desc":"Data to format in `msg`.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"static","source":{"line":34,"path":"src/Utility.lua"}},{"name":"xassert","desc":"Basically just [assert](https://create.roblox.com/docs/reference/engine/globals/LuaGlobals#assert) and [xpcall](https://create.roblox.com/docs/reference/engine/globals/LuaGlobals#xpcall) combined.","params":[{"name":"assertion","desc":"The param to check the value of.","lua_type":"T"},{"name":"handler","desc":"The function to run if `assertion` is not truthy.","lua_type":"() -> ()"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"static","source":{"line":51,"path":"src/Utility.lua"}},{"name":"assertmulti","desc":"Basically just [assert](https://create.roblox.com/docs/reference/engine/globals/LuaGlobals#assert) but can handle multple assertions in one function, cutting down on calls and wasted resources.","params":[{"name":"...","desc":"The assertion parameters, parameters are in same order as `Utility.assert`.","lua_type":"{a | b| {any}?}"}],"returns":[{"desc":"","lua_type":"T?"}],"function_type":"static","source":{"line":64,"path":"src/Utility.lua"}},{"name":"DeepCopy","desc":"Since [table.clone](https://create.roblox.com/docs/reference/engine/libraries/table#table.clone) does not copy tables nested deeper then its parent, we created a function to deep copy tables which copies all tables nested inside it as well as the parent table.","params":[{"name":"t","desc":"The table to deep copy. Can be a dictionary or an array.","lua_type":"{a}"}],"returns":[{"desc":"","lua_type":"{a}"}],"function_type":"static","source":{"line":79,"path":"src/Utility.lua"}},{"name":"IsDictionary","desc":"Tells whether the provided table, `t`, is a dictionary or not. True if yes, and vice versa.","params":[{"name":"t","desc":"The table to check the type of.","lua_type":"{any}"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":99,"path":"src/Utility.lua"}},{"name":"DictionaryToArray","desc":"Converts a dictionary to an array, can be useful for when cutting down on data costs. It essentially serializes a dictionary.","params":[{"name":"d","desc":"The dictionary to convert.","lua_type":"{[a]: b}"}],"returns":[{"desc":"","lua_type":"{{a | b}}?"}],"function_type":"static","source":{"line":114,"path":"src/Utility.lua"}},{"name":"ArrayToDictionary","desc":"Converts an array to a dictionary, this is basically the deserializer for `Utility.DictionaryToArray`.","params":[{"name":"t","desc":"The array to convert.","lua_type":"{{a | b}}"}],"returns":[{"desc":"","lua_type":"{[a]: b}?"}],"function_type":"static","source":{"line":131,"path":"src/Utility.lua"}},{"name":"dictionaryLen","desc":"Running this function on a dictionary allows you to use the length (#) operator on dictionaries. [Length operator](https://create.roblox.com/docs/luau/operators#miscellaneous)","params":[{"name":"d","desc":"The dictionary to set the metamethod to.","lua_type":"{[any]: any}"}],"returns":[],"function_type":"static","source":{"line":151,"path":"src/Utility.lua"}},{"name":"GetAncestors","desc":"Returns every ancestor of `instance`, excluding the [DataModel](https://create.roblox.com/docs/projects/data-model)","params":[{"name":"instance","desc":"The instance to get the ancestors of.","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"{Instance}"}],"function_type":"static","source":{"line":173,"path":"src/Utility.lua"}},{"name":"WaitForChildWhichIsA","desc":"Basically [Instance:WaitForChild] and [Instance:FindFirstChildWhichIsA] combined.","params":[{"name":"instance","desc":"The instance to perform the function on.","lua_type":"Instance"},{"name":"className","desc":"The [Instance.ClassName] to look for, uses [Instance:IsA].","lua_type":"string"},{"name":"timeOut","desc":"The amount of time to wait until the child request is timed out.","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Instance"}],"function_type":"static","source":{"line":195,"path":"src/Utility.lua"}},{"name":"WaitForChildOfClass","desc":"Basically [Instance:WaitForChild] and [Instance:FindFirstChildOfClass] combined.","params":[{"name":"instance","desc":"The instance to perform the function on.","lua_type":"Instance"},{"name":"className","desc":"The [Instance.ClassName] to look for.","lua_type":"string"},{"name":"timeOut","desc":"The amount of time to wait until the child request is timed out.","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Instance"}],"function_type":"static","source":{"line":212,"path":"src/Utility.lua"}},{"name":"ConflictingValues","desc":"Iterates through a list of values and returns a boolean and a string. If the value is true, then a string will be returned with a list of values and their order in the original list. The function is useful for times when you only want 1 value to be used at a time. **Example:**\\n\\n```lua\\nlocal MyValues = {true, true, false}\\n\\nprint(Utility.ConflictingValues(MyValues))\\n\\n-- Output: true Conflicting Values: 1, 2\\n```","params":[{"name":"values","desc":"The list of values to be checked.","lua_type":"{any}"},{"name":"sep","desc":"If values are conflicting with each other, an error of the indexes are thrown and this is the separator between each one.","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"(boolean, string?)"}],"function_type":"static","source":{"line":236,"path":"src/Utility.lua"}},{"name":"TableToString","desc":"Converts a table to a string, useful for displaying tables on GUI\'s. This is compatible with nested tables, dictionaries, and arrays. Example:\\n\\n```lua\\nlocal MyTable = {\\"This table\\", \\"was converted into\\", 1, \\"string\\", \\"!\\"}\\n\\nprint(Utility.TableToString(MyTable, \\", \\"))\\n-- Output: {[1] = \\"This table\\", [2] = \\"was converted into\\", [3] = 1, [4] = \\"string\\", [5] = \\"!\\"}\\n```","params":[{"name":"t","desc":"The table to convert to a string.","lua_type":"{[any]: any}"},{"name":"sep","desc":"The separator between each key + value","lua_type":"string?"},{"name":"i","desc":"The index to start at. (only applies to arrays)","lua_type":"number?"},{"name":"j","desc":"The index to end at. (only applies to arrays)","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"string?"}],"function_type":"static","source":{"line":271,"path":"src/Utility.lua"}}],"properties":[],"types":[],"name":"Utility","desc":"The Utility class.","source":{"line":6,"path":"src/Utility.lua"}}')}}]);