"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2052],{40854:e=>{e.exports=JSON.parse('{"functions":[{"name":"Fire","desc":"Fires an event which sends data to the client, equivalent to [RemoteEvent:FireClient].\\n\\n:::tip\\n\\nIf you need to fire the event to multiple players instead of one, you can use a table of players.\\n\\n```lua\\nNetworkController:Fire({Player1, Player2, Player3}, {1, 2, 3})\\n```\\n\\n:::","params":[{"name":"recipients","desc":"The players who should recieve the data and/or call","lua_type":"Player | {Player}"},{"name":"data","desc":"The data that should be sent to the client","lua_type":"({any} | any)?"}],"returns":[],"function_type":"method","source":{"line":224,"path":"src/dynamic/networkcontroller.lua"}},{"name":"FireAll","desc":"Fires an event which sends data to every client connected to the server, equivalent to [RemoteEvent:FireAllClients].","params":[{"name":"data","desc":"The data that should be sent to each player","lua_type":"({any} | any)?"}],"returns":[],"function_type":"method","source":{"line":238,"path":"src/dynamic/networkcontroller.lua"}},{"name":"FireExcept","desc":"Fires an event which sends data to every client connected to the server, except for players in the `except` parameter.","params":[{"name":"except","desc":"The players which the call should not be sent to","lua_type":"Player | {Player}"},{"name":"data","desc":"The data that should be sent to each player except `except`","lua_type":"({any} | any)?"}],"returns":[],"function_type":"method","source":{"line":248,"path":"src/dynamic/networkcontroller.lua"}},{"name":"OnInvoke","desc":"Recieves an invoke from the server, and runs the callback function which returns some data. Equivalent to [RemoteFunction.OnServerInvoke].","params":[{"name":"callback","desc":"The callback function to run on invoke, must return at least 1 value.","lua_type":"(sender: Player, data: {any}) -> (({any} | any)?)"}],"returns":[],"function_type":"method","source":{"line":262,"path":"src/dynamic/networkcontroller.lua"}},{"name":"SetRateLimit","desc":"Sets a rate limit that is applied when invoking or firing a network controller from the client.","params":[{"name":"maxInvokesPerSecond","desc":"The maximum amount of invokes allowed per second, set to `-1` to disable the rate limit","lua_type":"number"},{"name":"invokeOverflowCallback","desc":"The callback function to run when the player has exceeded the current rate limit","lua_type":"((sender: Player) -> ())?"}],"returns":[],"function_type":"method","source":{"line":272,"path":"src/dynamic/networkcontroller.lua"}},{"name":"Once","desc":"Connects a function to the event that is fired when the client fires the network controller. When using `:Once`, the function is only run the first time and then the connection is disconnected automatically.","params":[{"name":"func","desc":"The function to call when data is recieved from the client","lua_type":"(sender: Player, data: {any}) -> ()"}],"returns":[{"desc":"","lua_type":"ControllerConnection"}],"function_type":"method","source":{"line":291,"path":"src/dynamic/networkcontroller.lua"}},{"name":"Connect","desc":"Connects a function to the event that is fired when the server fires the network controller.","params":[{"name":"func","desc":"The function to call when data is recieved from the server","lua_type":"(sender: Player, data: {any}) -> ()"}],"returns":[{"desc":"","lua_type":"ControllerConnection"}],"function_type":"method","source":{"line":304,"path":"src/dynamic/networkcontroller.lua"}},{"name":"Wait","desc":"Yields the current thread until the client fires the network controller.","params":[],"returns":[{"desc":"","lua_type":"(Player, {any})"}],"function_type":"method","yields":true,"source":{"line":317,"path":"src/dynamic/networkcontroller.lua"}},{"name":"DisconnectAll","desc":"Disconnects all listeners from the current network controller.","params":[],"returns":[],"function_type":"method","source":{"line":324,"path":"src/dynamic/networkcontroller.lua"}}],"properties":[{"name":"Name","desc":"The name of the the network controller.","lua_type":"string","readonly":true,"source":{"line":62,"path":"src/dynamic/networkcontroller.lua"}},{"name":"_Connections","desc":"A list of connections.","lua_type":"{ControllerConnection}","private":true,"source":{"line":71,"path":"src/dynamic/networkcontroller.lua"}},{"name":"_Bridge","desc":"The bridge for use in BridgeNet.","lua_type":"ServerBridge","private":true,"readonly":true,"source":{"line":81,"path":"src/dynamic/networkcontroller.lua"}}],"types":[],"name":"NetworkControllerServer","desc":"The NetworkControllerServer class.","realm":["Server"],"source":{"line":52,"path":"src/dynamic/networkcontroller.lua"}}')}}]);