[{"title":"Benchmark","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Benchmark","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/api/Benchmark#functions","content":" "},{"title":"CreateBenchmark​","type":1,"pageTitle":"Benchmark","url":"/CanaryEngine/api/Benchmark#CreateBenchmark","content":"&lt;/&gt; Benchmark.CreateBenchmark() → BenchmarkObject Creates a new Benchmark object to be used. "},{"title":"BenchmarkObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/BenchmarkObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#properties","content":" "},{"title":"IsCompleted​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#IsCompleted","content":"&lt;/&gt; BenchmarkObject.IsCompleted: boolean A boolean to decide if the benchmark should be GC'ed.  "},{"title":"Destroying​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Destroying","content":"Event &lt;/&gt; BenchmarkObject.Destroying: ScriptSignal A signal that fires when the benchmark has been disposed of.  "},{"title":"StartTime​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#StartTime","content":"&lt;/&gt; BenchmarkObject.StartTime: number The time (in seconds) the benchmark was started at.  "},{"title":"EndTime​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#EndTime","content":"&lt;/&gt; BenchmarkObject.EndTime: number The time (in seconds) the benchmark was ended at. "},{"title":"Functions​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#functions","content":" "},{"title":"SetFunction​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#SetFunction","content":"&lt;/&gt; BenchmarkObject:SetFunction( timesToRun: number,-- The amount of times to run func. func: (timesRan: number) → ()-- The function to run for each timesToRun index, has a timesRan argument which is how many times the benchmark has run so far. ) → number? Sets the function to be ran timesToRun amount of times. danger BenchmarkObject:Stop is already called after being finished, calling the latter manually will result in an error.  "},{"title":"Start​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Start","content":"&lt;/&gt; BenchmarkObject:Start() → () Starts the benchmark object.  "},{"title":"Stop​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Stop","content":"&lt;/&gt; BenchmarkObject:Stop() → number Stops the benchmark from running and destroys it, returns the amount of time it took to complete the code above it.  "},{"title":"GetCurrentTime​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#GetCurrentTime","content":"&lt;/&gt; BenchmarkObject:GetCurrentTime() → number? Gets the current elapsed time of the benchmark.  "},{"title":"Destroy​","type":1,"pageTitle":"BenchmarkObject","url":"/CanaryEngine/api/BenchmarkObject#Destroy","content":"&lt;/&gt; BenchmarkObject:Destroy() → () Destroys the BenchmarkObject, this is done automatically after SetFunction is finished of Stop is called. "},{"title":"CanaryEngine","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngine","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#types","content":" "},{"title":"ClientNetworkController​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#ClientNetworkController","content":"&lt;/&gt; interface ClientNetworkController { Connect: ( self: ClientNetworkController&lt;T, U&gt;?, func: (data: {T}) → () ) → (ScriptConnection) Once: ( self: ClientNetworkController&lt;T, U&gt;?, func: (data: {T}) → () ) → (ScriptConnection) Wait: ( self: ClientNetworkController&lt;T, U&gt;? ) → ({T}) Fire: ( self: ClientNetworkController&lt;T, U&gt;?, data: ({T} | T)? ) → () InvokeAsync: ( self: ClientNetworkController&lt;T, U&gt;?, data: ({T} | T)? ) → ({U}) DisconnectAll: ( self: ClientNetworkController&lt;T, U&gt;? ) → () Name: string } A ClientNetworkController is basically a mixed version of a RemoteEvent and RemoteFunction. It has better features and is more performant.  "},{"title":"ServerNetworkController​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#ServerNetworkController","content":"&lt;/&gt; interface ServerNetworkController { Connect: ( self: ServerNetworkController&lt;T, U&gt;?, func: ( sender: Player , data: {T} ) → () ) → (ScriptConnection) Once: ( self: ServerNetworkController&lt;T, U&gt;?, func: ( sender: Player , data: {T} ) → () ) → (ScriptConnection) Wait: ( self: ServerNetworkController&lt;T, U&gt;? ) → ( Player , {T} ) Fire: ( self: ServerNetworkController&lt;T, U&gt;?, recipient: Player | {Player }, data: ({T} | T)? ) → () OnInvoke: ( self: ServerNetworkController&lt;T, U&gt;?, callback: ( sender: Player , data: {T} ) → () ) → () SetRateLimit: ( self: ServerNetworkController&lt;T, U&gt;?, maxInvokesPerSecond: number, invokeOverflowCallback: (sender: Player ) → () ) → () DisconnectAll: ( self: ServerNetworkController&lt;T, U&gt;? ) → () Name: string } A ServerNetworkController is basically a mixed version of a RemoteEvent and RemoteFunction. It has better features and is more performant, though this is the server-sided API. "},{"title":"Properties​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#properties","content":" "},{"title":"Runtime​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#Runtime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngine.Runtime: { RuntimeSettings: RuntimeSettings, RuntimeContext: RuntimeContext } The runtime property contains settings that are set during runtime, and the current context of the server/client.  "},{"title":"Libraries​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#Libraries","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngine.Libraries: { Utility: Utility, Benchmark: Benchmark, Statistics: Statistics, Serialize: Serialize } The libraries property contains useful libraries like Benchmark or Serialize. "},{"title":"Functions​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#functions","content":" "},{"title":"GetEngineServer​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetEngineServer","content":"This item only works when running on the server. Server &lt;/&gt; CanaryEngine.GetEngineServer() → EngineServer? Gets the server-sided interface of CanaryEngine  "},{"title":"GetEngineClient​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetEngineClient","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; CanaryEngine.GetEngineClient() → EngineClient? Gets the client-sided interface of CanaryEngine  "},{"title":"GetEngineReplicated​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetEngineReplicated","content":"&lt;/&gt; CanaryEngine.GetEngineReplicated() → EngineReplicated? Gets the global-sided interface of CanaryEngine. Recommended that use this only in replicated packages, this is a bad practice anywhere else.  "},{"title":"CreateSignal​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#CreateSignal","content":"&lt;/&gt; CanaryEngine.CreateSignal( signalName: string-- The name of the signal ) → ScriptSignal&lt;any&gt; Creates a new signal that is then given a reference in the signals table.  "},{"title":"CreateAnonymousSignal​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#CreateAnonymousSignal","content":"&lt;/&gt; CanaryEngine.CreateAnonymousSignal() → ScriptSignal&lt;any&gt; Creates a new anonymous signal.  "},{"title":"GetLatestPackageVersionAsync​","type":1,"pageTitle":"CanaryEngine","url":"/CanaryEngine/api/CanaryEngine#GetLatestPackageVersionAsync","content":"This item only works when running on the server. Server This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields deprecated in v3.1.4 &lt;/&gt; This was deprecated in v3.1.4 Deprecated in favor of newer and better package systems CanaryEngine.GetLatestPackageVersionAsync( package: Instance ,-- The package to check the version of, must have the required attributes. warnIfNotLatestVersion: boolean?,-- An optional setting to warn the user if the provided package is not up-to-date, defaults to true. respectDebugger: boolean?-- An optional setting to respect the debugger when warning the user, only applies when warnIfNotLatestVersion is true. ) → number? Checks the latest version of the provided package, and returns the latest version if you gave version permissions. caution If you come across the error &quot;package must have a valid 'VersionNumber'&quot;, that means the description of your asset does not contain the current version of your asset. This is required to compare versions. "},{"title":"CanaryEngineReplicated","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngineReplicated","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngineReplicated","url":"/CanaryEngine/api/CanaryEngineReplicated#properties","content":" "},{"title":"Packages​","type":1,"pageTitle":"CanaryEngineReplicated","url":"/CanaryEngine/api/CanaryEngineReplicated#Packages","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineReplicated.Packages: Folder  A reference to the Packages folder that is replicated.  "},{"title":"Media​","type":1,"pageTitle":"CanaryEngineReplicated","url":"/CanaryEngine/api/CanaryEngineReplicated#Media","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineReplicated.Media: Folder  A reference to the Media folder that is replicated. "},{"title":"Controllers","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Controllers","content":"On this page Controllers Show Private The parent of all classes.","keywords":""},{"title":"NetworkController","type":0,"sectionRef":"#","url":"/CanaryEngine/api/NetworkController","content":"On this page NetworkController The parent of all classes.","keywords":""},{"title":"CanaryEngineServer","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngineServer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#properties","content":" "},{"title":"Media​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#Media","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineServer.Media: { Server: Folder , Replicated: Folder } A reference to the Media folder on the Server, also gives access to replicated media.  "},{"title":"Packages​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#Packages","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineServer.Packages: { Server: Folder , Replicated: Folder } A reference to the Packages folder on the Server, also gives access to replicated Packages. "},{"title":"Functions​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#functions","content":" "},{"title":"CreateNetworkController​","type":1,"pageTitle":"CanaryEngineServer","url":"/CanaryEngine/api/CanaryEngineServer#CreateNetworkController","content":"&lt;/&gt; CanaryEngineServer.CreateNetworkController( controllerName: string-- The name of the controller ) → ServerNetworkController&lt;any&gt; Creates a new network controller on the server, with the name of controllerName tip You can set the data type of a network controller after it being made like the following: local NetworkController: CanaryEngine.ServerNetworkController&lt;number&gt; = EngineServer.CreateNetworkController(&quot;MyNewNetworkController&quot;) -- assuming you are sending over and recieving a number  "},{"title":"CanaryEngineClient","type":0,"sectionRef":"#","url":"/CanaryEngine/api/CanaryEngineClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#properties","content":" "},{"title":"Player​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Player","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.Player: Player  A simple reference to the Players.LocalPlayer.  "},{"title":"PlayerGui​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#PlayerGui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.PlayerGui: StarterGui  A simple reference to the Player.PlayerGui, useful for automatic typing and API simplicity.  "},{"title":"PlayerBackpack​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#PlayerBackpack","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CanaryEngineClient.PlayerBackpack: StarterPack  A simple reference to the player's Backpack, useful for automatic typing and API simplicity.  "},{"title":"LocalObjects​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#LocalObjects","content":"This item is read only and cannot be modified. Read Only deprecated in v2 &lt;/&gt; This was deprecated in v2 Use PlayerBackpack and PlayerGui instead. CanaryEngineClient.LocalObjects: dictionary Local objects of the player.  "},{"title":"Media​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Media","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineClient.Media: { Client: Folder , Replicated: Folder } A reference to the Media folder on the client, also gives access to replicated media.  "},{"title":"Packages​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#Packages","content":"This item is read only and cannot be modified. Read Only deprecated in v3.1.5 &lt;/&gt; This was deprecated in v3.1.5 Deprecated in favor of newer and better package systems CanaryEngineClient.Packages: { Client: Folder , Replicated: Folder } A reference to the Packages folder on the client, also gives access to replicated Packages. "},{"title":"Functions​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#functions","content":" "},{"title":"CreateNetworkController​","type":1,"pageTitle":"CanaryEngineClient","url":"/CanaryEngine/api/CanaryEngineClient#CreateNetworkController","content":"&lt;/&gt; CanaryEngineClient.CreateNetworkController( controllerName: string-- The name of the controller ) → ClientNetworkController&lt;any&gt; Creates a new network controller on the client, with the name of controllerName tip You can set the data type of a network controller after it being made like the following: local NetworkController: CanaryEngine.ClientNetworkController&lt;boolean&gt; = EngineClient.CreateNetworkController(&quot;MyNewNetworkController&quot;) -- assuming you are sending over and recieving a boolean  "},{"title":"EasyProfile","type":0,"sectionRef":"#","url":"/CanaryEngine/api/EasyProfile","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#types","content":" "},{"title":"ProfileMetaData​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#ProfileMetaData","content":"&lt;/&gt; interface ProfileMetaData { ProfileCreated: number ProfileLoadCount: number ProfileActiveSession: { placeId: number, jobId: string } } The metadata for a user's profile.  "},{"title":"GlobalKey​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#GlobalKey","content":"&lt;/&gt; type GlobalKey = { Key: string, Value: any, KeyId: number } The type for the global key. "},{"title":"Properties​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#properties","content":" "},{"title":"LoadedPlayers​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#LoadedPlayers","content":"&lt;/&gt; EasyProfile.LoadedPlayers: {Player } A table of the currently loaded players in game. Do not edit this unless you know what you are doing. "},{"title":"Functions​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#functions","content":" "},{"title":"CreateProfileStore​","type":1,"pageTitle":"EasyProfile","url":"/CanaryEngine/api/EasyProfile#CreateProfileStore","content":"&lt;/&gt; EasyProfile.CreateProfileStore( name: string?,-- The name of the profile store to get, defaults to &quot;Global&quot; defaultPlayerData: dictionary,-- The default data of player when loaded, only applies if this is their first time joining keyPattern: string-- The pattern for the key to use, use '%d' as a placeholder for the player's UserId. ) → DataStoreObject? Gets an existing profile store of creates one if it does not exist yet. "},{"title":"NetworkControllerClient","type":0,"sectionRef":"#","url":"/CanaryEngine/api/NetworkControllerClient","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NetworkControllerClient.Name: string The name of the the network controller. "},{"title":"Functions​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Fire","content":"&lt;/&gt; NetworkControllerClient:Fire( data: ({any} | any)?-- The data that should be sent to the server ) → () Fires an event which sends data to the server, equivalent to RemoteEvent:FireServer tip If you're firing a single piece of data, there is no need to wrap it in a table! NetworkController:Fire(&quot;Hello, world!&quot;)   "},{"title":"Once​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Once","content":"&lt;/&gt; NetworkControllerClient:Once( func: (data: {any}) → ()-- The function to call when data is recieved from the server ) → ScriptConnection Connects a function to the event that is fired when the server fires the network controller. When using :Once, the function is only run the first time and then the connection is disconnected automatically.  "},{"title":"Connect​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Connect","content":"&lt;/&gt; NetworkControllerClient:Connect( func: (data: {any}) → ()-- The function to call when data is recieved from the server ) → ScriptConnection Connects a function to the event that is fired when the server fires the network controller.  "},{"title":"Wait​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkControllerClient:Wait() → {any} Yields the current thread until the server fires the network controller.  "},{"title":"InvokeAsync​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#InvokeAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkControllerClient:InvokeAsync( data: ({any} | any)?-- The data to invoke the server with ) → {any} Invokes the server, equivalent to RemoteFunction:InvokeServer.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"NetworkControllerClient","url":"/CanaryEngine/api/NetworkControllerClient#DisconnectAll","content":"&lt;/&gt; NetworkControllerClient:DisconnectAll() → () Disconnects all listeners from the current network controller. "},{"title":"NetworkControllerServer","type":0,"sectionRef":"#","url":"/CanaryEngine/api/NetworkControllerServer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NetworkControllerServer.Name: string The name of the the network controller. "},{"title":"Functions​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Fire","content":"&lt;/&gt; NetworkControllerServer:Fire( recipients: Player | {Player },-- The players who should recieve the data and/or call data: ({any} | any)?-- The data that should be sent to the client ) → () Fires an event which sends data to the client, equivalent to RemoteEvent:FireClient. tip If you need to fire the event to multiple players instead of one, you can use a table of players. NetworkController:Fire({Player1, Player2, Player3}, {1, 2, 3})   "},{"title":"FireAll​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#FireAll","content":"&lt;/&gt; NetworkControllerServer:FireAll( data: ({any} | any)?-- The data that should be sent to each player ) → () Fires an event which sends data to every client connected to the server, equivalent to RemoteEvent:FireAllClients.  "},{"title":"FireExcept​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#FireExcept","content":"&lt;/&gt; NetworkControllerServer:FireExcept( except: Player | {Player },-- The players which the call should not be sent to data: ({any} | any)?-- The data that should be sent to each player except except ) → () Fires an event which sends data to every client connected to the server, except for players in the except parameter.  "},{"title":"OnInvoke​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#OnInvoke","content":"&lt;/&gt; NetworkControllerServer:OnInvoke( callback: ( sender: Player , data: {any} ) → (({any} | any)?)-- The callback function to run on invoke, must return at least 1 value. ) → () Recieves an invoke from the server, and runs the callback function which returns some data. Equivalent to RemoteFunction.OnServerInvoke.  "},{"title":"SetRateLimit​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#SetRateLimit","content":"&lt;/&gt; NetworkControllerServer:SetRateLimit( maxInvokesPerSecond: number,-- The maximum amount of invokes allowed per second, set to -1 to disable the rate limit invokeOverflowCallback: ((sender: Player ) → ())?-- The callback function to run when the player has exceeded the current rate limit ) → () Sets a rate limit that is applied when invoking or firing a network controller from the client.  "},{"title":"Once​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Once","content":"&lt;/&gt; NetworkControllerServer:Once( func: ( sender: Player , data: {any} ) → ()-- The function to call when data is recieved from the client ) → ScriptConnection Connects a function to the event that is fired when the client fires the network controller. When using :Once, the function is only run the first time and then the connection is disconnected automatically.  "},{"title":"Connect​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Connect","content":"&lt;/&gt; NetworkControllerServer:Connect( func: ( sender: Player , data: {any} ) → ()-- The function to call when data is recieved from the server ) → ScriptConnection Connects a function to the event that is fired when the server fires the network controller.  "},{"title":"Wait​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; NetworkControllerServer:Wait() → {any} Yields the current thread until the client fires the network controller.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"NetworkControllerServer","url":"/CanaryEngine/api/NetworkControllerServer#DisconnectAll","content":"&lt;/&gt; NetworkControllerServer:DisconnectAll() → () Disconnects all listeners from the current network controller. "},{"title":"ProfileObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/ProfileObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#properties","content":" "},{"title":"GlobalKeyAdded​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GlobalKeyAdded","content":"Event &lt;/&gt; ProfileObject.GlobalKeyAdded: ScriptSignal&lt;GlobalKey&gt; Fires when a global key has been recieved by the server. "},{"title":"Functions​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#functions","content":" "},{"title":"GetProfileData​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetProfileData","content":"&lt;/&gt; ProfileObject:GetProfileData() → {[string]: any}? Gets the data for the profile that was loaded in.  "},{"title":"GetGlobalKeys​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetGlobalKeys","content":"&lt;/&gt; ProfileObject:GetGlobalKeys() → {GlobalKey}? Gets all of the global keys that were recieved when the player was offline.  "},{"title":"AddUserIds​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#AddUserIds","content":"&lt;/&gt; ProfileObject:AddUserIds( userIds: number | {number}-- The UserIds to add. ) → () Adds UserId's to the player's profile.  "},{"title":"GetUserIds​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetUserIds","content":"&lt;/&gt; ProfileObject:GetUserIds() → {number}? Gets all the associated UserId's of the player's profile.  "},{"title":"RemoveUserIds​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#RemoveUserIds","content":"&lt;/&gt; ProfileObject:RemoveUserIds( userIds: {number}?-- The userId's to clear off the player's profile ) → () Removes all the associated UserId's off of the player's profile, leave userIds blank to clear all user IDs.  "},{"title":"GetMetaData​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetMetaData","content":"&lt;/&gt; ProfileObject:GetMetaData() → ProfileMetaData? Gets all metadata that is related to the player's profile.  "},{"title":"GetDataUsage​","type":1,"pageTitle":"ProfileObject","url":"/CanaryEngine/api/ProfileObject#GetDataUsage","content":"&lt;/&gt; ProfileObject:GetDataUsage() → number? Gets the amount of data (in percent) currently being used by the profile. "},{"title":"SignalController","type":0,"sectionRef":"#","url":"/CanaryEngine/api/SignalController","content":"On this page SignalController Show Private The parent of all classes.","keywords":""},{"title":"ProfileStoreObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/ProfileStoreObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#properties","content":" "},{"title":"SessionLockClaimed​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#SessionLockClaimed","content":"Event &lt;/&gt; ProfileStoreObject.SessionLockClaimed: ScriptSignal&lt;Player &gt; Fires when a session lock has been claimed.  "},{"title":"SessionLockUnclaimed​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#SessionLockUnclaimed","content":"Event &lt;/&gt; ProfileStoreObject.SessionLockUnclaimed: ScriptSignal&lt;Player &gt; Fires when a session lock has been unclaimed. "},{"title":"Functions​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#functions","content":" "},{"title":"DeleteProfileAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#DeleteProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:DeleteProfileAsync( userId: number-- The user id to erase the data of ) → () Completely wipes the data of the key userId, good for complying with GDPR practices.  "},{"title":"GetProfileAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#GetProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:GetProfileAsync( userId: number-- The user id to get of the data of ) → dictionary? Fetches the data off the key userId, this will only read data and does not load it.  "},{"title":"LoadProfileAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#LoadProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:LoadProfileAsync( player: Player ,-- The player to load the data of reconcileData: boolean?,-- Whether or not to reconcile the data of the player, defaults to true profileClaimedHandler: (( placeId: number, gameJobId: string ) → (&quot;Forceload&quot; | &quot;Cancel&quot;))?-- The function to run when the profile of the player is already claimed ) → typeof(setmetatable({},{__index=ProfileObject}))? Loads the data off the key userId. All edits to this data will be saved and be able to be used next session.  "},{"title":"UnclaimSessionLock​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#UnclaimSessionLock","content":"&lt;/&gt; ProfileStoreObject:UnclaimSessionLock( player: Player ,-- The player to unclaim the session lock of valuesToSave: dictionary?-- Values to save that are not already saved to the player data, for example attributes that need to be saved on player removing ) → () Unclaims the session lock that player holds, throwing a warning if they are not session locked. This is usually because you did not load the player data correctly. valuesToSave Usage: Players.PlayerRemoving:Connect(function(player) MyDataStore:UnclaimSessionLock(player, { Coins = player:GetAttribute(&quot;Coins&quot;) -- Make sure coins is a member of your profile data, or it will skip over it. }) end)   "},{"title":"SetGlobalKeyAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#SetGlobalKeyAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:SetGlobalKeyAsync( userId: number,-- The player to set the global key of key: string,-- The key to send to userId value: any-- The value of key ) → () Sets a global key for userId, regardless of whether they share the same JobId as the sender or they are offline.  "},{"title":"RemoveGlobalKeyAsync​","type":1,"pageTitle":"ProfileStoreObject","url":"/CanaryEngine/api/ProfileStoreObject#RemoveGlobalKeyAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStoreObject:RemoveGlobalKeyAsync( userId: number,-- The player to remove the global key of keyId: number-- The keyId of the key to remove ) → () Removes the global key that sent by using ProfileStoreObject:SetGlobalKeyAsync with the key ID of keyId. This only applies if it has not been recieved yet. "},{"title":"SignalControllerObject","type":0,"sectionRef":"#","url":"/CanaryEngine/api/SignalControllerObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SignalControllerObject.Name: string The name of the the signal controller. "},{"title":"Functions​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Fire","content":"&lt;/&gt; SignalControllerObject:Fire( data: ({any} | any)?-- The data that should be sent the other script ) → () Fires an event which sends data to another script that is connected to it, equivalent to BindableEvent:Fire tip If you're firing a single piece of data, there is no need to wrap it in a table! SignalController:Fire(&quot;Hello, world!&quot;)   "},{"title":"Connect​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Connect","content":"&lt;/&gt; SignalControllerObject:Connect( func: (data: {any}) → ()-- The function to call when data is recieved ) → ScriptConnection Connects a function to the event that is fired when another script fires the controller.  "},{"title":"Once​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Once","content":"&lt;/&gt; SignalControllerObject:Once( func: (data: {any}) → ()-- The function to call when data is recieved ) → ScriptConnection Connects a function to the event that is fired when another script fires the controller. When using :Once, the function is only run the first time and then the connection is disconnected automatically.  "},{"title":"Wait​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; SignalControllerObject:Wait() → {any} Yields the current thread until another script fires the signal controller.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"SignalControllerObject","url":"/CanaryEngine/api/SignalControllerObject#DisconnectAll","content":"&lt;/&gt; SignalControllerObject:DisconnectAll() → () Disconnects all listeners from the current signal controller. "},{"title":"Statistics","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Statistics","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#functions","content":" "},{"title":"GetMedian​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#GetMedian","content":"&lt;/&gt; Statistics.GetMedian( numberList: {number}-- The dataset to perform the action on. ) → number Gets the number that is in the middle of the dataset, more info can be found here. Here's an example scenario: local CollectedData = {6, 8, 3, 7, 9, 0, 4, 1} print(Statistics.GetMedian(CollectedData)) -- Output: 8   "},{"title":"GetMean​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#GetMean","content":"&lt;/&gt; Statistics.GetMean( numberList: {number}-- The dataset to perform the action on. ) → number Gets the most common number in the dataset, more info can be found here. Here's an example scenario: local CoinsForPlayers = {651, 8801, 371, 79, 918, 0, 46, 183} print(Statistics.GetMean(CoinsForPlayers)) -- Get the average amount of coins each player has, keep in mind 8801 will skew the data. -- Output: 1381.125   "},{"title":"GetMode​","type":1,"pageTitle":"Statistics","url":"/CanaryEngine/api/Statistics#GetMode","content":"&lt;/&gt; Statistics.GetMode( numberList: {number}-- The dataset to perform the action on. ) → number? Gets the number that occurs most in the provided dataset, nil if none or each number occurs the same amount of times. More info can be found here "},{"title":"Utility","type":0,"sectionRef":"#","url":"/CanaryEngine/api/Utility","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#functions","content":" "},{"title":"nilparam​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#nilparam","content":"&lt;/&gt; Utility.nilparam( param: T?,-- The param to check the value of. default: T-- The default value to be provided if param is nil. ) → T Checks if param is nil, and if it is, it will return the provided default value.  "},{"title":"assert​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#assert","content":"&lt;/&gt; Utility.assert( assertion: T,-- The param to check the value of. msg: string,-- The error message to throw if assertion is not truthy. ...: any-- Data to format in msg. ) → T? Basically just assert, but more performant.  "},{"title":"xassert​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#xassert","content":"&lt;/&gt; Utility.xassert( assertion: T,-- The param to check the value of. handler: () → ()-- The function to run if assertion is not truthy. ) → T? Basically just assert and xpcall combined.  "},{"title":"assertmulti​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#assertmulti","content":"&lt;/&gt; Utility.assertmulti( ...: {a | b | {any}?}-- The assertion parameters, parameters are in same order as Utility.assert. ) → T? Basically just assert but can handle multple assertions in one function, cutting down on calls and wasted resources.  "},{"title":"DeepCopy​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#DeepCopy","content":"&lt;/&gt; Utility.DeepCopy( t: {a}-- The table to deep copy. Can be a dictionary or an array. ) → {a} Since table.clone does not copy tables nested deeper then its parent, we created a function to deep copy tables which copies all tables nested inside it as well as the parent table.  "},{"title":"IsDictionary​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#IsDictionary","content":"&lt;/&gt; Utility.IsDictionary( t: {any}-- The table to check the type of. ) → boolean Tells whether the provided table, t, is a dictionary or not. True if yes, and vice versa.  "},{"title":"DictionaryToArray​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#DictionaryToArray","content":"&lt;/&gt; Utility.DictionaryToArray( d: {[a]: b}-- The dictionary to convert. ) → {{a | b}}? Converts a dictionary to an array, can be useful for when cutting down on data costs. It essentially serializes a dictionary.  "},{"title":"ArrayToDictionary​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#ArrayToDictionary","content":"&lt;/&gt; Utility.ArrayToDictionary( t: {{a | b}}-- The array to convert. ) → {[a]: b}? Converts an array to a dictionary, this is basically the deserializer for Utility.DictionaryToArray.  "},{"title":"dictionaryLen​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#dictionaryLen","content":"&lt;/&gt; Utility.dictionaryLen( d: {[any]: any}-- The dictionary to set the metamethod to. ) → () Running this function on a dictionary allows you to use the length (#) operator on dictionaries. Length operator  "},{"title":"GetAncestors​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#GetAncestors","content":"&lt;/&gt; Utility.GetAncestors( instance: Instance -- The instance to get the ancestors of. ) → {Instance } Returns every ancestor of instance, excluding the DataModel  "},{"title":"WaitForChildWhichIsA​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#WaitForChildWhichIsA","content":"&lt;/&gt; Utility.WaitForChildWhichIsA( instance: Instance ,-- The instance to perform the function on. className: string,-- The Instance.ClassName to look for, uses Instance:IsA. timeOut: number?-- The amount of time to wait until the child request is timed out. ) → Instance  Basically Instance:WaitForChild and Instance:FindFirstChildWhichIsA combined.  "},{"title":"WaitForChildOfClass​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#WaitForChildOfClass","content":"&lt;/&gt; Utility.WaitForChildOfClass( instance: Instance ,-- The instance to perform the function on. className: string,-- The Instance.ClassName to look for. timeOut: number?-- The amount of time to wait until the child request is timed out. ) → Instance  Basically Instance:WaitForChild and Instance:FindFirstChildOfClass combined.  "},{"title":"ConflictingValues​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#ConflictingValues","content":"&lt;/&gt; Utility.ConflictingValues( values: {any},-- The list of values to be checked. sep: string?-- If values are conflicting with each other, an error of the indexes are thrown and this is the separator between each one. ) → ( boolean, string? ) Iterates through a list of values and returns a boolean and a string. If the value is true, then a string will be returned with a list of values and their order in the original list. The function is useful for times when you only want 1 value to be used at a time. Example: local MyValues = {true, true, false} print(Utility.ConflictingValues(MyValues)) -- Output: true Conflicting Values: 1, 2   "},{"title":"TableToString​","type":1,"pageTitle":"Utility","url":"/CanaryEngine/api/Utility#TableToString","content":"&lt;/&gt; Utility.TableToString( t: {[any]: any},-- The table to convert to a string. sep: string?,-- The separator between each key + value i: number?,-- The index to start at. (only applies to arrays) j: number?-- The index to end at. (only applies to arrays) ) → string? Converts a table to a string, useful for displaying tables on GUI's. This is compatible with nested tables, dictionaries, and arrays. Example: local MyTable = {&quot;This table&quot;, &quot;was converted into&quot;, 1, &quot;string&quot;, &quot;!&quot;} print(Utility.TableToString(MyTable, &quot;, &quot;)) -- Output: {[1] = &quot;This table&quot;, [2] = &quot;was converted into&quot;, [3] = 1, [4] = &quot;string&quot;, [5] = &quot;!&quot;}  "},{"title":"Featured Games","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/featured","content":"","keywords":""},{"title":"Gorytown 2​","type":1,"pageTitle":"Featured Games","url":"/CanaryEngine/docs/featured#gorytown-2","content":"Trailer:  "},{"title":"Questions","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/questions","content":"","keywords":""},{"title":"Installation + Usage​","type":1,"pageTitle":"Questions","url":"/CanaryEngine/docs/getstarted/questions#installation--usage","content":"Refer to the installation article hosted on our documentation site. From there, you can go to the next article in tutorials to learn more about the framework. If you need any additional help, feel free to reply to this post or shoot me a message on Discord. "},{"title":"Issues​","type":1,"pageTitle":"Questions","url":"/CanaryEngine/docs/getstarted/questions#issues","content":"Came across an issue in our code? Simply create a new issue on the GitHub repository or create a new bug report in our discord server linked above. "},{"title":"Comparison","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/comparison","content":"Comparison It really comes down on your use case, if you are just starting up a short project that needs some easy organization, I would consider using CanaryEngine, even larger projects would suit your use of it. Each framework has each of their own disadvantages and advantages, so it's ultimately up to you to decide what you should use and what suits you best. I always thought many other frameworks available were challenging to learn (at least for me) so I created this framework instead.","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/installation","content":"","keywords":""},{"title":"Roblox Marketplace​","type":1,"pageTitle":"Installation","url":"/CanaryEngine/docs/getstarted/installation#roblox-marketplace","content":"Navigate to the install page of the Canary Studio plugin, you can find that hereOpen Roblox Studio and install the plugin from within your plugin inventory. "},{"title":"Download on Github​","type":1,"pageTitle":"Installation","url":"/CanaryEngine/docs/getstarted/installation#download-on-github","content":"Navigate to the latest release of CanaryEngine on Github, you can find that hereChoose CanaryStudioPlugin.rbxm to downloadOpen Roblox Studio, and drag CanaryStudioPlugin.rbxm from your download directory into studio.Right click the plugin, and choose Save as Local Plugin "},{"title":"Get on NPM​","type":1,"pageTitle":"Installation","url":"/CanaryEngine/docs/getstarted/installation#get-on-npm","content":"-- coming soon "},{"title":"Features","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/getstarted/features","content":"Features Type Safe 🦺 Strictly typed, along with native support for roblox-ts. Context-specific API 🖥️ The API is aimed to be completely separate the server and the client, which allows for a better type checking experience. Fully Documented 📚 The entire framework is documented, along with tutorials on each subject. Optimized 🏃‍♀️ Extremely optimized, and in some circumstances starting up in as little as 0.5 milliseconds! Secure 🔐 The networking system that CanaryEngine uses can actually partially prevent exploits like RemoteSpy from being easily useable. ... and much more!","keywords":""},{"title":"About","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/intro","content":"About Well... What is CanaryEngine? CanaryEngine is the all new framework for all your games and projects, no matter the size of them. I've personally used it for all of my projects, and it works great despite the scale of each one. I designed the framework to have a super optimized networking and signal system. It combines the usage of @ffrostfall's BridgeNet2 and and @stravant's GoodSignal modules, which helps it be optimized by a ton. It also comes with many other libraries built in, such as @commitblue's BlueSerializer and the framework's own Utility, Benchmark, and Statistics modules. They each cover many of the edge cases that come up lots of times during the development process. A fine example of this is saving instances in datastores. It was made to be complex, but also easy to learn which is what mainly makes the framework stand out from the others. I have covered almost all of the API and libraries in our documentation, be sure to check that out before starting out with the framework. Our goal while creating this framework was to not intrude on the developers code, but instead let them customize their experience and give them basic tools along the way, such as the built-in networking system. I have found myself that this actually makes the process of developing a project way faster than before, and is just nicer to work with overall when stuff isn't practically shoved down your throat. We want you to have control over how your game functions, and not intrude on your unique process","keywords":""},{"title":"Signals","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/customsignals","content":"","keywords":""},{"title":"ScriptSignals​","type":1,"pageTitle":"Signals","url":"/CanaryEngine/docs/tutorials/customsignals#scriptsignals","content":"Firing and connecting to signals should be as simple as possible. If you are familiar with the RBXScriptSignal, then it should be easy enough to learn ScriptSignal's. As common knowledge, firing + connecting is identical across both the NetworkController and ScriptSignal. Here's an example of an event being fired and connected to: local TestSignal = CanaryEngine.CreateSignal(&quot;NewSignal&quot;) TestSignal:Connect(function(data) print(data) -- Output: {&quot;Hello,&quot;, &quot;player&quot;} end) TestSignal:Fire({ &quot;Hello,&quot;, &quot;player&quot; })  ScriptSignals also share identical methods with the RBXScriptSignal, such as including ScriptSignal:Once and even a ScriptSignal:Wait method. Though, an extra feature that comes with using @stravant's signal implementation is that you have the ability to disconnect every connection associated with the signal. This allows for quick cleanups of a signal. "},{"title":"AnonymousSignals​","type":1,"pageTitle":"Signals","url":"/CanaryEngine/docs/tutorials/customsignals#anonymoussignals","content":"Anonymous signals are a special type of signal that can be only used from this refrence. These are signals that are not stored in any way by default compared to ScriptSignals, and are meant to be used for objects and events, and not for script communcation. They are created by using the CanaryEngine.CreateAnonymousSignal method. Here's an example of an anonymous signal being used: local AnonymousSignal = CanaryEngine.CreateAnonymousSignal() local AnonymousSignal2 = CanaryEngine.CreateAnonymousSignal() -- no name conflicts! AnonymousSignal:Connect(function(data) print(data) -- Output: &quot;{&quot;Signal 1&quot;}&quot; end) AnonymousSignal:Fire({ &quot;Signal 1&quot; }) AnonymousSignal2:Connect(function(data) print(data) -- Output: &quot;{&quot;Signal 2&quot;}&quot; end) AnonymousSignal2:Fire({ &quot;Signal 2&quot; })  Anonymous signals share identical methods with ScriptSignal so there is nothing new to learn here. "},{"title":"ScriptConnections​","type":1,"pageTitle":"Signals","url":"/CanaryEngine/docs/tutorials/customsignals#scriptconnections","content":"ScriptConnection's are what is returned by ScriptSignal's, these allow you to check the current connection status with ScriptConnection.Connected and allow you to disconnect any connections you made, either by using ScriptSignal:Connect or ScriptSignal:Once, by using the ScriptConnection:Disconnect method. These are identical to the RBXScriptConnection, so documentation isn't really needed with this. That's really all for ScriptSignals, they are a fairly simple concept and are extremely useful in many varied ways. "},{"title":"Networking","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/networking","content":"","keywords":""},{"title":"RemoteEvents​","type":1,"pageTitle":"Networking","url":"/CanaryEngine/docs/tutorials/networking#remoteevents","content":"Instead of interacting with the normal RemoteEvent API, we use a custom method which is much more compatible with many game's standards. Though, to first create a new controller, use the .CreateNetworkController function in the context specific framework. In this tutorial, we assume the server is trying to send information to the client. Here's an example of how you would set up the network controller: local SendInfoNetwork = CanaryEngineServer.CreateNetworkController(&quot;SendInfoNetwork&quot;) print(SendInfoNetwork.Name) -- Output: SendInfoNetwork  Now lets set up the network controller to be client-sided as well: local SendInfoNetwork = CanaryEngineClient.CreateNetworkController(&quot;SendInfoNetwork&quot;)  Now lets continue this code and make it so it can recieve info from the server: local SendInfoNetwork = CanaryEngineClient.CreateNetworkController(&quot;SendInfoNetwork&quot;) SendInfoNetwork:Connect(function(data) print(data) end)  Though, we have a problem. SendInfoNetwork is not recieving anything on the client if nothing is being fired from the server. To pass data through the network controller, you can use NetworkController:Fire. Here's how we would do that on the server: local SendInfoNetwork = CanaryEngineServer.CreateNetworkController(&quot;SendInfoNetwork&quot;) local PlayerService = game:GetService(&quot;Players&quot;) print(SendInfoNetwork.Name) -- Output: SendInfoNetwork SendInfoNetwork:FireAll({ -- When sending data on the server, you must pass a player argument. In this example though, we are firing to all players. &quot;Sent through a&quot;, &quot;Network controller!&quot; })  When we start the script, we should then see the the name in the output, and also see the following in the client output: { &quot;Sent through a&quot;, &quot;Network controller!&quot; }  Please keep in mind that these can be used for many other things other than just passing strings through, also that if you just have a single piece of data you can send it through the fire method without wrapping it in a table. Though, keep in mind that the data you recieve will always be a table no matter how you pass the data originally. We also have available the Fire, FireExcept and SetRateLimit functions. Each of them are documented in their own API page. "},{"title":"RemoteFunctions​","type":1,"pageTitle":"Networking","url":"/CanaryEngine/docs/tutorials/networking#remotefunctions","content":"The RemoteFunction is a fairly straightforward way of sending and recieving data at the same time. For now, we only support invoking the server as invoking the client is fairly useless at this point. If you need this functionality, you can use the remote event part of the network controllers. You may already know how to set up the basic network controller, so here's just a basic example of the client asking the server for a value: Server:​ local ValueGetNetwork = CanaryEngineServer.CreateNetworkController(&quot;ValueGetNetwork&quot;) ValueGetNetwork:OnInvoke(function(sender, data) print(sender.Name) -- The player who sent the invoke's name if data[1] then return &quot;yes&quot; -- We must return a value here, or it will error else return &quot;no&quot; end end)  Client:​ Now on the client, we can invoke the server using NetworkController:InvokeAsync. We must send a boolean through to be checked on invoked. local ValueGetNetwork = CanaryEngineClient.CreateNetworkController(&quot;ValueGetNetwork&quot;) print(ValueGetNetwork:InvokeAsync(true)) -- When the value is recieved, this should return &quot;yes&quot; according to the server code.  Obviously, this isn't quite a valid use case for invoking the server, but some valid use cases include asking the server for a specific value. What we are doing here is just a waste of bandwidth, but for the sake of the tutorial I will be including this. "},{"title":"Package System","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/packages","content":"","keywords":""},{"title":"Inserting Packages​","type":1,"pageTitle":"Package System","url":"/CanaryEngine/docs/tutorials/packages#inserting-packages","content":"To insert a new package, simply use the 'Create New Instance' function of the plugin, then from there you can insert a new package, for either the client, to be replicated, or the server. From there, you can reference the module in your script and start using it! Here's an example of how you would grab a package from the server. "},{"title":"Inserting Scripts​","type":1,"pageTitle":"Package System","url":"/CanaryEngine/docs/tutorials/packages#inserting-scripts","content":"Inserting new scripts is also a very straightforward process and very similar to packages. First, create a new instance, then select either client script or server script from the dropdown menu. In order to reference a server-sided package, you must create a server script. Here's an example of how you would get your package from the script we just created: local Packages = CanaryEngineServer.Packages.Server local MyPackage = require(Packages.MyPackage) MyPackage.MyFunction()  "},{"title":"Package Vendor​","type":1,"pageTitle":"Package System","url":"/CanaryEngine/docs/tutorials/packages#package-vendor","content":"You may notice that when you create a new package it has a child named 'Vendor'. In a lot of languages, a vendor is an easy way to prevent recursiveness, and that's what we are doing here. The vendor folder should automatically be referenced in your new package, from there you can insert dependencies of your package inside of vendor, and then import them inside the package. Another benefit to using a vendor folder is a less messy file structure, as packages just referencing others back and forth can start to be a huge problem for anyones codebase. "},{"title":"File Structure","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/structure","content":"File Structure The CanaryEngine file structure aims to be easy to understand, easy to edit, and extremely customizable. Here's a look at the default file structure: Notice how Media and Packages each have their own context specific folders? In each of these folders, goes the content for that context. For example, EngineServer/Media/ shares the same behavior with ServerStorage. In this case, replicated shares behavior with ReplicatedStorage. The only acception here is with the EngineScripts folder, you cannot have a replicated script which runs both client and server sided as of writing this. You can organize these folders however you want, by adding new folders inside and placing new content inside. Please note that the folders already inside each media folder is just a template for easy startups, this does not have to be kept the way it is. Another feature of CanaryEngine is the way you can create your own file structure, in the plugin, all you have to do is select the destination folders for each folder that is required. (eg: Media, Packages, and Scripts). Doing this also allows you to organize more of your own way. Have lots of libraries you need to store? Just create a new 'Libraries' folder that can be used alongside the required ones! As a conclusion, do not move any folders that have already been placed where they are (aside from the folders inside of media), as it will cause CanaryEngine to error.","keywords":""},{"title":"Data Management","type":0,"sectionRef":"#","url":"/CanaryEngine/docs/tutorials/datastoring","content":"","keywords":""},{"title":"Profile Stores​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#profile-stores","content":"If you have ever used ProfileService before, you have probably heard of the ProfileStore. It's basically just a GlobalDataStore, but instead of managing keys, it manages individual profiles instead. These profiles are assigned to a unique ID, so they can be assigned to the player's UserId, or it can be it's own thing. Though, first, lets create a new ProfileStore using the DataService.CreateProfileStore function: local DataService = CanaryEngineServer.Data local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}})  After this, you can declare the key pattern if you want to. This is optional though, and the default is 'user_%d' for compatibility with older versions. Though, I recommend just changing to '%d', so it only contains the player's UserId. local DataService = CanaryEngineServer.Data local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- Change the pattern if you want to, it's better for usage  Now, we can detect when the player joins, and when they do, we can load in their data by using ProfileStoreObject:LoadProfileAsync. This will load in the profile and allow you to interact with the data. Here's how you would do that: local DataService = CanaryEngineServer.Data local PlayerService = game:GetService(&quot;Players&quot;) local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- // Functions local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) -- Load the profile, you can also add an optional `reconcile` argument which reconciles the data end PlayerService.PlayerAdded:Connect(PlayerAdded)  Now sometimes, the player will join before the server script runs. To fix this, we can loop through all of the players after we listen to the player added event, then run the player added function: local DataService = CanaryEngineServer.Data local PlayerService = game:GetService(&quot;Players&quot;) local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- // Functions local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) end PlayerService.PlayerAdded:Connect(PlayerAdded) for _, player in PlayerService:GetPlayers() do task.spawn(PlayerAdded, player) end  Now we are all set! But first, we have to make sure to unclaim the session lock when the player leaves. Doing this is pretty simple, just add this to your script: PlayerService.PlayerRemoving:Connect(function(player) MyNewDataStore:UnclaimSessionLock(player) end)  "},{"title":"Profiles​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#profiles","content":"Now we can get started on profiles. As explained in the introduction, profiles are essentially the successor to datastore keys. These are much easier to use and make the process of data saving so much easier. Setting the data here is as simple as editing a table. No getter or setter functions, you can make your own. What we will do first is get the data we can edit from the profile. In order to do this, you must call PlayerProfile:GetProfileData. local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) local ProfileData = PlayerProfile:GetProfileData() print(ProfileData) -- Output: {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}} end  Now that we have verified that our code is indeed working, we can now edit the values in the profile data dictionary as so: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) local ProfileData = PlayerProfile:GetProfileData() print(ProfileData) -- Output: {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}} table.insert(ProfileData.Items, &quot;Iron Sword&quot;) print(ProfileData) -- Output: {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;, &quot;Iron Sword&quot;}} end  We can do quite a bit with this, such as increase the user's cash each time they join, or even remove specific items. When we join back, the iron sword should persist if you set up the profile store correctly. Though, there is one more thing you should learn: GlobalKeys. "},{"title":"Global Keys​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#global-keys","content":"Global keys are a better way of handling cross server communication with data, and you can even send data to offline UserId's. It uses the Global Updates feature of ProfileService internally, and that system is very confusing which is why we made our own. There's really only 3 functions to learn, so it should be pretty straightforward to learn. To start, we can create and setup our profile store just as how we did previously: local DataService = CanaryEngineServer.Data local PlayerService = game:GetService(&quot;Players&quot;) local MyNewDataStore = DataService.CreateProfileStore(&quot;MyProfileStore&quot;, {Cash = 100, Gems = 5, Items = {&quot;Wooden Sword&quot;}}, &quot;%d&quot;) -- // Functions local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) end PlayerService.PlayerRemoving:Connect(function(player) MyNewDataStore:UnclaimSessionLock(player) end) PlayerService.PlayerAdded:Connect(PlayerAdded) for _, player in PlayerService:GetPlayers() do task.spawn(PlayerAdded, player) end  First, in our PlayerAdded function, lets send a new global key out to ourselves by using the ProfileStoreObject:SetGlobalKeyAsync method: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) MyNewDataStore:SetGlobalKeyAsync(player.UserId, &quot;GlobalKeyTest&quot;, &quot;somerandomstringdata&quot;) -- The first argument is the player who is recieving it, and the others are the key name followed by the value end  To listen when the player recieves a new key in-game, you can use the ProfileObject.GlobalKeyAdded event, it will fire when a new key is added: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) PlayerProfile.GlobalKeyAdded:Connect(function(data) print(data[1]) -- Output: {Key = &quot;GlobalKeyTest&quot;, Value = {this = &quot;is a test&quot;}, KeyId = 1} end) MyNewDataStore:SetGlobalKeyAsync(player.UserId, &quot;GlobalKeyTest&quot;, &quot;somerandomstringdata&quot;) end  Please note that when doing this, you must wait around 60 seconds for the key to be recieved. Though next, we should setup a way for us to recieve keys that we got when were offline. In order to do this, you can use the ProfileObject:GetGlobalKeys method, it returns a table of global keys that we can loop through: local function PlayerAdded(player) local PlayerProfile = MyNewDataStore:LoadProfileAsync(player) for _, globalKey in PlayerProfile:GetGlobalKeys() do print(globalKey.Key, &quot;:&quot;, globalKey.Value) -- Output: {Key = &quot;GlobalKeyTest&quot;, Value = &quot;somerandomstringdata&quot;, KeyId = 1} end PlayerProfile.GlobalKeyAdded:Connect(function(data) print(data[1]) -- Output: {Key = &quot;GlobalKeyTest&quot;, Value = &quot;somerandomstringdata&quot;, KeyId = 2} end) MyNewDataStore:SetGlobalKeyAsync(player.UserId, &quot;GlobalKeyTest&quot;, &quot;somerandomstringdata&quot;) end  Please do note that there is a difference between GlobalKey's and regular keys. GlobalKey's are supposed to be global: they can be recieved globally, and regular keys are just for the individual player that owns the profile. "},{"title":"Extras​","type":1,"pageTitle":"Data Management","url":"/CanaryEngine/docs/tutorials/datastoring#extras","content":"There are a few extra functions you should know about. Here is a table of them: Function\tDescriptionProfileObject:GetDataUsage\tAllows you to measure the size of the profile's data, in a percentage (%) ProfileObject:GetMetaData\tGets specific meta data about the profile, such as the amount of times it was loaded. ProfileStoreObject:GetProfileAsync\tGets the profile data for a specific UserId, useful for getting anyones data. You can not edit any values though. "}]